package main.java.com.moneydesktop.finance.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import main.java.com.moneydesktop.finance.database.BusinessObjectBase;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table BUSINESS_OBJECT_BASE.
*/
public class BusinessObjectBaseDao extends AbstractDao<BusinessObjectBase, Long> {

    public static final String TABLENAME = "BUSINESS_OBJECT_BASE";

    /**
     * Properties of entity BusinessObjectBase.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DataState = new Property(1, Integer.class, "dataState", false, "DATA_STATE");
        public final static Property DateModified = new Property(2, java.util.Date.class, "dateModified", false, "DATE_MODIFIED");
        public final static Property ErrorCode = new Property(3, String.class, "errorCode", false, "ERROR_CODE");
        public final static Property ExternalId = new Property(4, String.class, "externalId", false, "EXTERNAL_ID");
        public final static Property Flags = new Property(5, Integer.class, "flags", false, "FLAGS");
        public final static Property PrimaryKey = new Property(6, String.class, "primaryKey", false, "PRIMARY_KEY");
        public final static Property ToString = new Property(7, String.class, "toString", false, "TO_STRING");
        public final static Property Version = new Property(8, Integer.class, "version", false, "VERSION");
    };

    private DaoSession daoSession;


    public BusinessObjectBaseDao(DaoConfig config) {
        super(config);
    }

    public BusinessObjectBaseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BUSINESS_OBJECT_BASE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DATA_STATE' INTEGER," + // 1: dataState
                "'DATE_MODIFIED' INTEGER," + // 2: dateModified
                "'ERROR_CODE' TEXT," + // 3: errorCode
                "'EXTERNAL_ID' TEXT," + // 4: externalId
                "'FLAGS' INTEGER," + // 5: flags
                "'PRIMARY_KEY' TEXT," + // 6: primaryKey
                "'TO_STRING' TEXT," + // 7: toString
                "'VERSION' INTEGER);"); // 8: version
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BUSINESS_OBJECT_BASE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BusinessObjectBase entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Integer dataState = entity.getDataState();
        if (dataState != null) {
            stmt.bindLong(2, dataState);
        }

        java.util.Date dateModified = entity.getDateModified();
        if (dateModified != null) {
            stmt.bindLong(3, dateModified.getTime());
        }

        String errorCode = entity.getErrorCode();
        if (errorCode != null) {
            stmt.bindString(4, errorCode);
        }

        String externalId = entity.getExternalId();
        if (externalId != null) {
            stmt.bindString(5, externalId);
        }

        Integer flags = entity.getFlags();
        if (flags != null) {
            stmt.bindLong(6, flags);
        }

        String primaryKey = entity.getPrimaryKey();
        if (primaryKey != null) {
            stmt.bindString(7, primaryKey);
        }

        String toString = entity.getToString();
        if (toString != null) {
            stmt.bindString(8, toString);
        }

        Integer version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(9, version);
        }
    }

    @Override
    protected void attachEntity(BusinessObjectBase entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public BusinessObjectBase readEntity(Cursor cursor, int offset) {
        BusinessObjectBase entity = new BusinessObjectBase( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // dataState
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // dateModified
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // errorCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // externalId
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // flags
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // primaryKey
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // toString
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // version
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BusinessObjectBase entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDataState(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setDateModified(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setErrorCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setExternalId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFlags(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setPrimaryKey(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setToString(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVersion(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BusinessObjectBase entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(BusinessObjectBase entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
