package main.java.com.moneydesktop.finance.database;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import main.java.com.moneydesktop.finance.database.Transactions;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table TRANSACTIONS.
*/
public class TransactionsDao extends AbstractDao<Transactions, Long> {

    public static final String TABLENAME = "TRANSACTIONS";

    /**
     * Properties of entity Transactions.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Amount = new Property(1, Double.class, "amount", false, "AMOUNT");
        public final static Property AmountReimbursable = new Property(2, Double.class, "amountReimbursable", false, "AMOUNT_REIMBURSABLE");
        public final static Property Date = new Property(3, java.util.Date.class, "date", false, "DATE");
        public final static Property DatePosted = new Property(4, java.util.Date.class, "datePosted", false, "DATE_POSTED");
        public final static Property DayNumber = new Property(5, Integer.class, "dayNumber", false, "DAY_NUMBER");
        public final static Property ExclusionFlags = new Property(6, Integer.class, "exclusionFlags", false, "EXCLUSION_FLAGS");
        public final static Property HasReceipt = new Property(7, Boolean.class, "hasReceipt", false, "HAS_RECEIPT");
        public final static Property HasSplit = new Property(8, Boolean.class, "hasSplit", false, "HAS_SPLIT");
        public final static Property IsBusiness = new Property(9, Boolean.class, "isBusiness", false, "IS_BUSINESS");
        public final static Property IsCleared = new Property(10, Boolean.class, "isCleared", false, "IS_CLEARED");
        public final static Property IsExcluded = new Property(11, Boolean.class, "isExcluded", false, "IS_EXCLUDED");
        public final static Property IsFlagged = new Property(12, Boolean.class, "isFlagged", false, "IS_FLAGGED");
        public final static Property IsManual = new Property(13, Boolean.class, "isManual", false, "IS_MANUAL");
        public final static Property IsMatched = new Property(14, Boolean.class, "isMatched", false, "IS_MATCHED");
        public final static Property IsProcessed = new Property(15, Boolean.class, "isProcessed", false, "IS_PROCESSED");
        public final static Property IsReimbursable = new Property(16, Boolean.class, "isReimbursable", false, "IS_REIMBURSABLE");
        public final static Property IsReported = new Property(17, Boolean.class, "isReported", false, "IS_REPORTED");
        public final static Property IsReportedAndPaid = new Property(18, Boolean.class, "isReportedAndPaid", false, "IS_REPORTED_AND_PAID");
        public final static Property IsReportedAndSubmitted = new Property(19, Boolean.class, "isReportedAndSubmitted", false, "IS_REPORTED_AND_SUBMITTED");
        public final static Property IsSplit = new Property(20, Boolean.class, "isSplit", false, "IS_SPLIT");
        public final static Property IsVoid = new Property(21, Boolean.class, "isVoid", false, "IS_VOID");
        public final static Property Memo = new Property(22, String.class, "memo", false, "MEMO");
        public final static Property MonthNumber = new Property(23, Integer.class, "monthNumber", false, "MONTH_NUMBER");
        public final static Property NormalizedAmount = new Property(24, Double.class, "normalizedAmount", false, "NORMALIZED_AMOUNT");
        public final static Property OriginalCategory = new Property(25, String.class, "originalCategory", false, "ORIGINAL_CATEGORY");
        public final static Property OriginalTitle = new Property(26, String.class, "originalTitle", false, "ORIGINAL_TITLE");
        public final static Property QuarterNumber = new Property(27, Integer.class, "quarterNumber", false, "QUARTER_NUMBER");
        public final static Property RawAmount = new Property(28, Double.class, "rawAmount", false, "RAW_AMOUNT");
        public final static Property Reference = new Property(29, String.class, "reference", false, "REFERENCE");
        public final static Property TagString = new Property(30, String.class, "tagString", false, "TAG_STRING");
        public final static Property Title = new Property(31, String.class, "title", false, "TITLE");
        public final static Property TransactionId = new Property(32, String.class, "transactionId", false, "TRANSACTION_ID");
        public final static Property TransactionType = new Property(33, Integer.class, "transactionType", false, "TRANSACTION_TYPE");
        public final static Property WeekNumber = new Property(34, Integer.class, "weekNumber", false, "WEEK_NUMBER");
        public final static Property YearNumber = new Property(35, Integer.class, "yearNumber", false, "YEAR_NUMBER");
        public final static Property BankAccountId = new Property(36, Long.class, "bankAccountId", false, "BANK_ACCOUNT_ID");
        public final static Property CategoryId = new Property(37, Long.class, "categoryId", false, "CATEGORY_ID");
        public final static Property ParentTransactionId = new Property(38, Long.class, "parentTransactionId", false, "PARENT_TRANSACTION_ID");
        public final static Property BusinessObjectId = new Property(39, long.class, "businessObjectId", false, "BUSINESS_OBJECT_ID");
    };

    private DaoSession daoSession;

    private Query<Transactions> bankAccount_TransactionsQuery;
    private Query<Transactions> category_TransactionsQuery;
    private Query<Transactions> transactions_ChildrenQuery;

    public TransactionsDao(DaoConfig config) {
        super(config);
    }

    public TransactionsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TRANSACTIONS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'AMOUNT' REAL," + // 1: amount
                "'AMOUNT_REIMBURSABLE' REAL," + // 2: amountReimbursable
                "'DATE' INTEGER," + // 3: date
                "'DATE_POSTED' INTEGER," + // 4: datePosted
                "'DAY_NUMBER' INTEGER," + // 5: dayNumber
                "'EXCLUSION_FLAGS' INTEGER," + // 6: exclusionFlags
                "'HAS_RECEIPT' INTEGER," + // 7: hasReceipt
                "'HAS_SPLIT' INTEGER," + // 8: hasSplit
                "'IS_BUSINESS' INTEGER," + // 9: isBusiness
                "'IS_CLEARED' INTEGER," + // 10: isCleared
                "'IS_EXCLUDED' INTEGER," + // 11: isExcluded
                "'IS_FLAGGED' INTEGER," + // 12: isFlagged
                "'IS_MANUAL' INTEGER," + // 13: isManual
                "'IS_MATCHED' INTEGER," + // 14: isMatched
                "'IS_PROCESSED' INTEGER," + // 15: isProcessed
                "'IS_REIMBURSABLE' INTEGER," + // 16: isReimbursable
                "'IS_REPORTED' INTEGER," + // 17: isReported
                "'IS_REPORTED_AND_PAID' INTEGER," + // 18: isReportedAndPaid
                "'IS_REPORTED_AND_SUBMITTED' INTEGER," + // 19: isReportedAndSubmitted
                "'IS_SPLIT' INTEGER," + // 20: isSplit
                "'IS_VOID' INTEGER," + // 21: isVoid
                "'MEMO' TEXT," + // 22: memo
                "'MONTH_NUMBER' INTEGER," + // 23: monthNumber
                "'NORMALIZED_AMOUNT' REAL," + // 24: normalizedAmount
                "'ORIGINAL_CATEGORY' TEXT," + // 25: originalCategory
                "'ORIGINAL_TITLE' TEXT," + // 26: originalTitle
                "'QUARTER_NUMBER' INTEGER," + // 27: quarterNumber
                "'RAW_AMOUNT' REAL," + // 28: rawAmount
                "'REFERENCE' TEXT," + // 29: reference
                "'TAG_STRING' TEXT," + // 30: tagString
                "'TITLE' TEXT," + // 31: title
                "'TRANSACTION_ID' TEXT," + // 32: transactionId
                "'TRANSACTION_TYPE' INTEGER," + // 33: transactionType
                "'WEEK_NUMBER' INTEGER," + // 34: weekNumber
                "'YEAR_NUMBER' INTEGER," + // 35: yearNumber
                "'BANK_ACCOUNT_ID' INTEGER," + // 36: bankAccountId
                "'CATEGORY_ID' INTEGER," + // 37: categoryId
                "'PARENT_TRANSACTION_ID' INTEGER," + // 38: parentTransactionId
                "'BUSINESS_OBJECT_ID' INTEGER NOT NULL );"); // 39: businessObjectId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TRANSACTIONS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Transactions entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Double amount = entity.getAmount();
        if (amount != null) {
            stmt.bindDouble(2, amount);
        }

        Double amountReimbursable = entity.getAmountReimbursable();
        if (amountReimbursable != null) {
            stmt.bindDouble(3, amountReimbursable);
        }

        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(4, date.getTime());
        }

        java.util.Date datePosted = entity.getDatePosted();
        if (datePosted != null) {
            stmt.bindLong(5, datePosted.getTime());
        }

        Integer dayNumber = entity.getDayNumber();
        if (dayNumber != null) {
            stmt.bindLong(6, dayNumber);
        }

        Integer exclusionFlags = entity.getExclusionFlags();
        if (exclusionFlags != null) {
            stmt.bindLong(7, exclusionFlags);
        }

        Boolean hasReceipt = entity.getHasReceipt();
        if (hasReceipt != null) {
            stmt.bindLong(8, hasReceipt ? 1l: 0l);
        }

        Boolean hasSplit = entity.getHasSplit();
        if (hasSplit != null) {
            stmt.bindLong(9, hasSplit ? 1l: 0l);
        }

        Boolean isBusiness = entity.getIsBusiness();
        if (isBusiness != null) {
            stmt.bindLong(10, isBusiness ? 1l: 0l);
        }

        Boolean isCleared = entity.getIsCleared();
        if (isCleared != null) {
            stmt.bindLong(11, isCleared ? 1l: 0l);
        }

        Boolean isExcluded = entity.getIsExcluded();
        if (isExcluded != null) {
            stmt.bindLong(12, isExcluded ? 1l: 0l);
        }

        Boolean isFlagged = entity.getIsFlagged();
        if (isFlagged != null) {
            stmt.bindLong(13, isFlagged ? 1l: 0l);
        }

        Boolean isManual = entity.getIsManual();
        if (isManual != null) {
            stmt.bindLong(14, isManual ? 1l: 0l);
        }

        Boolean isMatched = entity.getIsMatched();
        if (isMatched != null) {
            stmt.bindLong(15, isMatched ? 1l: 0l);
        }

        Boolean isProcessed = entity.getIsProcessed();
        if (isProcessed != null) {
            stmt.bindLong(16, isProcessed ? 1l: 0l);
        }

        Boolean isReimbursable = entity.getIsReimbursable();
        if (isReimbursable != null) {
            stmt.bindLong(17, isReimbursable ? 1l: 0l);
        }

        Boolean isReported = entity.getIsReported();
        if (isReported != null) {
            stmt.bindLong(18, isReported ? 1l: 0l);
        }

        Boolean isReportedAndPaid = entity.getIsReportedAndPaid();
        if (isReportedAndPaid != null) {
            stmt.bindLong(19, isReportedAndPaid ? 1l: 0l);
        }

        Boolean isReportedAndSubmitted = entity.getIsReportedAndSubmitted();
        if (isReportedAndSubmitted != null) {
            stmt.bindLong(20, isReportedAndSubmitted ? 1l: 0l);
        }

        Boolean isSplit = entity.getIsSplit();
        if (isSplit != null) {
            stmt.bindLong(21, isSplit ? 1l: 0l);
        }

        Boolean isVoid = entity.getIsVoid();
        if (isVoid != null) {
            stmt.bindLong(22, isVoid ? 1l: 0l);
        }

        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(23, memo);
        }

        Integer monthNumber = entity.getMonthNumber();
        if (monthNumber != null) {
            stmt.bindLong(24, monthNumber);
        }

        Double normalizedAmount = entity.getNormalizedAmount();
        if (normalizedAmount != null) {
            stmt.bindDouble(25, normalizedAmount);
        }

        String originalCategory = entity.getOriginalCategory();
        if (originalCategory != null) {
            stmt.bindString(26, originalCategory);
        }

        String originalTitle = entity.getOriginalTitle();
        if (originalTitle != null) {
            stmt.bindString(27, originalTitle);
        }

        Integer quarterNumber = entity.getQuarterNumber();
        if (quarterNumber != null) {
            stmt.bindLong(28, quarterNumber);
        }

        Double rawAmount = entity.getRawAmount();
        if (rawAmount != null) {
            stmt.bindDouble(29, rawAmount);
        }

        String reference = entity.getReference();
        if (reference != null) {
            stmt.bindString(30, reference);
        }

        String tagString = entity.getTagString();
        if (tagString != null) {
            stmt.bindString(31, tagString);
        }

        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(32, title);
        }

        String transactionId = entity.getTransactionId();
        if (transactionId != null) {
            stmt.bindString(33, transactionId);
        }

        Integer transactionType = entity.getTransactionType();
        if (transactionType != null) {
            stmt.bindLong(34, transactionType);
        }

        Integer weekNumber = entity.getWeekNumber();
        if (weekNumber != null) {
            stmt.bindLong(35, weekNumber);
        }

        Integer yearNumber = entity.getYearNumber();
        if (yearNumber != null) {
            stmt.bindLong(36, yearNumber);
        }

        Long bankAccountId = entity.getBankAccountId();
        if (bankAccountId != null) {
            stmt.bindLong(37, bankAccountId);
        }

        Long categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindLong(38, categoryId);
        }

        Long parentTransactionId = entity.getParentTransactionId();
        if (parentTransactionId != null) {
            stmt.bindLong(39, parentTransactionId);
        }
        stmt.bindLong(40, entity.getBusinessObjectId());
    }

    @Override
    protected void attachEntity(Transactions entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public Transactions readEntity(Cursor cursor, int offset) {
        Transactions entity = new Transactions( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // amount
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // amountReimbursable
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // date
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // datePosted
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // dayNumber
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // exclusionFlags
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // hasReceipt
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // hasSplit
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isBusiness
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // isCleared
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // isExcluded
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // isFlagged
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // isManual
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // isMatched
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0, // isProcessed
            cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0, // isReimbursable
            cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0, // isReported
            cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0, // isReportedAndPaid
            cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0, // isReportedAndSubmitted
            cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20) != 0, // isSplit
            cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21) != 0, // isVoid
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // memo
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // monthNumber
            cursor.isNull(offset + 24) ? null : cursor.getDouble(offset + 24), // normalizedAmount
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // originalCategory
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // originalTitle
            cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27), // quarterNumber
            cursor.isNull(offset + 28) ? null : cursor.getDouble(offset + 28), // rawAmount
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // reference
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // tagString
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // title
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // transactionId
            cursor.isNull(offset + 33) ? null : cursor.getInt(offset + 33), // transactionType
            cursor.isNull(offset + 34) ? null : cursor.getInt(offset + 34), // weekNumber
            cursor.isNull(offset + 35) ? null : cursor.getInt(offset + 35), // yearNumber
            cursor.isNull(offset + 36) ? null : cursor.getLong(offset + 36), // bankAccountId
            cursor.isNull(offset + 37) ? null : cursor.getLong(offset + 37), // categoryId
            cursor.isNull(offset + 38) ? null : cursor.getLong(offset + 38), // parentTransactionId
            cursor.getLong(offset + 39) // businessObjectId
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Transactions entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAmount(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setAmountReimbursable(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setDatePosted(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setDayNumber(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setExclusionFlags(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setHasReceipt(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setHasSplit(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setIsBusiness(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setIsCleared(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setIsExcluded(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setIsFlagged(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setIsManual(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.setIsMatched(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setIsProcessed(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
        entity.setIsReimbursable(cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0);
        entity.setIsReported(cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0);
        entity.setIsReportedAndPaid(cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0);
        entity.setIsReportedAndSubmitted(cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0);
        entity.setIsSplit(cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20) != 0);
        entity.setIsVoid(cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21) != 0);
        entity.setMemo(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setMonthNumber(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setNormalizedAmount(cursor.isNull(offset + 24) ? null : cursor.getDouble(offset + 24));
        entity.setOriginalCategory(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setOriginalTitle(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setQuarterNumber(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
        entity.setRawAmount(cursor.isNull(offset + 28) ? null : cursor.getDouble(offset + 28));
        entity.setReference(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setTagString(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setTitle(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setTransactionId(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setTransactionType(cursor.isNull(offset + 33) ? null : cursor.getInt(offset + 33));
        entity.setWeekNumber(cursor.isNull(offset + 34) ? null : cursor.getInt(offset + 34));
        entity.setYearNumber(cursor.isNull(offset + 35) ? null : cursor.getInt(offset + 35));
        entity.setBankAccountId(cursor.isNull(offset + 36) ? null : cursor.getLong(offset + 36));
        entity.setCategoryId(cursor.isNull(offset + 37) ? null : cursor.getLong(offset + 37));
        entity.setParentTransactionId(cursor.isNull(offset + 38) ? null : cursor.getLong(offset + 38));
        entity.setBusinessObjectId(cursor.getLong(offset + 39));
     }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Transactions entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(Transactions entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /** Internal query to resolve the "transactions" to-many relationship of BankAccount. */
    public List<Transactions> _queryBankAccount_Transactions(Long bankAccountId) {
        synchronized (this) {
            if (bankAccount_TransactionsQuery == null) {
                QueryBuilder<Transactions> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.BankAccountId.eq(null));
                bankAccount_TransactionsQuery = queryBuilder.build();
            }
        }
        Query<Transactions> query = bankAccount_TransactionsQuery.forCurrentThread();
        query.setParameter(0, bankAccountId);
        return query.list();
    }

    /** Internal query to resolve the "transactions" to-many relationship of Category. */
    public List<Transactions> _queryCategory_Transactions(Long categoryId) {
        synchronized (this) {
            if (category_TransactionsQuery == null) {
                QueryBuilder<Transactions> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CategoryId.eq(null));
                category_TransactionsQuery = queryBuilder.build();
            }
        }
        Query<Transactions> query = category_TransactionsQuery.forCurrentThread();
        query.setParameter(0, categoryId);
        return query.list();
    }

    /** Internal query to resolve the "children" to-many relationship of Transactions. */
    public List<Transactions> _queryTransactions_Children(Long parentTransactionId) {
        synchronized (this) {
            if (transactions_ChildrenQuery == null) {
                QueryBuilder<Transactions> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ParentTransactionId.eq(null));
                transactions_ChildrenQuery = queryBuilder.build();
            }
        }
        Query<Transactions> query = transactions_ChildrenQuery.forCurrentThread();
        query.setParameter(0, parentTransactionId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getBankAccountDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getCategoryDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getTransactionsDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getBusinessObjectBaseDao().getAllColumns());
            builder.append(" FROM TRANSACTIONS T");
            builder.append(" LEFT JOIN BANK_ACCOUNT T0 ON T.'BANK_ACCOUNT_ID'=T0.'_id'");
            builder.append(" LEFT JOIN CATEGORY T1 ON T.'CATEGORY_ID'=T1.'_id'");
            builder.append(" LEFT JOIN TRANSACTIONS T2 ON T.'PARENT_TRANSACTION_ID'=T2.'_id'");
            builder.append(" LEFT JOIN BUSINESS_OBJECT_BASE T3 ON T.'BUSINESS_OBJECT_ID'=T3.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }

    protected Transactions loadCurrentDeep(Cursor cursor, boolean lock) {
        Transactions entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        BankAccount bankAccount = loadCurrentOther(daoSession.getBankAccountDao(), cursor, offset);
        entity.setBankAccount(bankAccount);
        offset += daoSession.getBankAccountDao().getAllColumns().length;

        Category category = loadCurrentOther(daoSession.getCategoryDao(), cursor, offset);
        entity.setCategory(category);
        offset += daoSession.getCategoryDao().getAllColumns().length;

        Transactions parent = loadCurrentOther(daoSession.getTransactionsDao(), cursor, offset);
        entity.setParent(parent);
        offset += daoSession.getTransactionsDao().getAllColumns().length;

        BusinessObjectBase businessObjectBase = loadCurrentOther(daoSession.getBusinessObjectBaseDao(), cursor, offset);
         if(businessObjectBase != null) {
            entity.setBusinessObjectBase(businessObjectBase);
        }

        return entity;
    }

    public Transactions loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();

        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);

        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }

    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Transactions> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Transactions> list = new ArrayList<Transactions>(count);

        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }

    protected List<Transactions> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }


    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Transactions> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }

}
