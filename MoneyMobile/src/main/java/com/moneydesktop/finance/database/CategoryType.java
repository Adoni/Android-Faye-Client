package main.java.com.moneydesktop.finance.database;

import java.util.List;

import org.json.JSONObject;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table CATEGORY_TYPE.
 */
public class CategoryType extends BusinessObject  {

    private Long id;
    private String categoryTypeId;
    private String categoryTypeName;
    private long businessObjectId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CategoryTypeDao myDao;

    private BusinessObjectBase businessObjectBase;
    private Long businessObjectBase__resolvedKey;

    private List<Category> categories;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public CategoryType() {
    }

    public CategoryType(Long id) {
        this.id = id;
    }

    public CategoryType(Long id, String categoryTypeId, String categoryTypeName, long businessObjectId) {
        this.id = id;
        this.categoryTypeId = categoryTypeId;
        this.categoryTypeName = categoryTypeName;
        this.businessObjectId = businessObjectId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCategoryTypeDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getCategoryTypeId() {
        return categoryTypeId;
    }

    public void setCategoryTypeId(String categoryTypeId) {
        this.categoryTypeId = categoryTypeId;
    }

    public String getCategoryTypeName() {
        return categoryTypeName;
    }

    public void setCategoryTypeName(String categoryTypeName) {
        this.categoryTypeName = categoryTypeName;
    }

    public long getBusinessObjectId() {
        return businessObjectId;
    }

    public void setBusinessObjectId(long businessObjectId) {
        this.businessObjectId = businessObjectId;
    }

    /** To-one relationship, resolved on first access. */
    public BusinessObjectBase getBusinessObjectBase() {
        long __key = this.businessObjectId;
        if (businessObjectBase__resolvedKey == null || !businessObjectBase__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BusinessObjectBaseDao targetDao = daoSession.getBusinessObjectBaseDao();
            BusinessObjectBase businessObjectBaseNew = targetDao.load(__key);
            synchronized (this) {
                businessObjectBase = businessObjectBaseNew;
                businessObjectBase__resolvedKey = __key;
            }
        }
        return businessObjectBase;
    }

    public void setBusinessObjectBase(BusinessObjectBase businessObjectBase) {
        if (businessObjectBase == null) {
            throw new DaoException("To-one property 'businessObjectId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.businessObjectBase = businessObjectBase;
            businessObjectId = businessObjectBase.getId();
            businessObjectBase__resolvedKey = businessObjectId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Category> getCategories() {
        if (categories == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoryDao targetDao = daoSession.getCategoryDao();
            List<Category> categoriesNew = targetDao._queryCategoryType_Categories(id);
            synchronized (this) {
                if(categories == null) {
                    categories = categoriesNew;
                }
            }
        }
        return categories;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCategories() {
        categories = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    public void setExternalId(String id) {
        setCategoryTypeId(id);
        getBusinessObjectBase().setExternalId(id);
    }

    public String getExternalId() {
        return getCategoryTypeId();
    }

    public static CategoryType createCategoryType(String id, String categoryTypeName) {

        CategoryType categoryType = new CategoryType(Long.valueOf((new String(id)).hashCode()), id, categoryTypeName, 0);

        return categoryType;
    }

    public JSONObject getJson() {
        return null;
    }
    // KEEP METHODS END

}
