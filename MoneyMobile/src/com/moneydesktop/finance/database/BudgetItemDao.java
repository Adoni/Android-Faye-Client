package com.moneydesktop.finance.database;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

import com.moneydesktop.finance.database.BudgetItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BUDGET_ITEM.
*/
public class BudgetItemDao extends AbstractDao<BudgetItem, Long> {

    public static final String TABLENAME = "BUDGET_ITEM";

    /**
     * Properties of entity BudgetItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Amount = new Property(1, Double.class, "amount", false, "AMOUNT");
        public final static Property BudgetItemId = new Property(2, String.class, "budgetItemId", false, "BUDGET_ITEM_ID");
        public final static Property IsActive = new Property(3, Boolean.class, "isActive", false, "IS_ACTIVE");
        public final static Property IsDefault = new Property(4, Boolean.class, "isDefault", false, "IS_DEFAULT");
        public final static Property CategoryId = new Property(5, Long.class, "categoryId", false, "CATEGORY_ID");
        public final static Property BusinessObjectId = new Property(6, long.class, "businessObjectId", false, "BUSINESS_OBJECT_ID");
    };

    private DaoSession daoSession;

    private Query<BudgetItem> category_BudgetItemsQuery;

    public BudgetItemDao(DaoConfig config) {
        super(config);
    }
    
    public BudgetItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BUDGET_ITEM' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'AMOUNT' REAL," + // 1: amount
                "'BUDGET_ITEM_ID' TEXT," + // 2: budgetItemId
                "'IS_ACTIVE' INTEGER," + // 3: isActive
                "'IS_DEFAULT' INTEGER," + // 4: isDefault
                "'CATEGORY_ID' INTEGER," + // 5: categoryId
                "'BUSINESS_OBJECT_ID' INTEGER NOT NULL );"); // 6: businessObjectId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BUDGET_ITEM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BudgetItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Double amount = entity.getAmount();
        if (amount != null) {
            stmt.bindDouble(2, amount);
        }
 
        String budgetItemId = entity.getBudgetItemId();
        if (budgetItemId != null) {
            stmt.bindString(3, budgetItemId);
        }
 
        Boolean isActive = entity.getIsActive();
        if (isActive != null) {
            stmt.bindLong(4, isActive ? 1l: 0l);
        }
 
        Boolean isDefault = entity.getIsDefault();
        if (isDefault != null) {
            stmt.bindLong(5, isDefault ? 1l: 0l);
        }
 
        Long categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindLong(6, categoryId);
        }
        stmt.bindLong(7, entity.getBusinessObjectId());
    }

    @Override
    protected void attachEntity(BudgetItem entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BudgetItem readEntity(Cursor cursor, int offset) {
        BudgetItem entity = new BudgetItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // amount
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // budgetItemId
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isActive
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // isDefault
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // categoryId
            cursor.getLong(offset + 6) // businessObjectId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BudgetItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAmount(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setBudgetItemId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsActive(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setIsDefault(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setCategoryId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setBusinessObjectId(cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BudgetItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BudgetItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "budgetItems" to-many relationship of Category. */
    public synchronized List<BudgetItem> _queryCategory_BudgetItems(Long categoryId) {
        if (category_BudgetItemsQuery == null) {
            QueryBuilder<BudgetItem> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.CategoryId.eq(categoryId));
            category_BudgetItemsQuery = queryBuilder.build();
        } else {
            category_BudgetItemsQuery.setParameter(0, categoryId);
        }
        return category_BudgetItemsQuery.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCategoryDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getBusinessObjectBaseDao().getAllColumns());
            builder.append(" FROM BUDGET_ITEM T");
            builder.append(" LEFT JOIN CATEGORY T0 ON T.'CATEGORY_ID'=T0.'_id'");
            builder.append(" LEFT JOIN BUSINESS_OBJECT_BASE T1 ON T.'BUSINESS_OBJECT_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected BudgetItem loadCurrentDeep(Cursor cursor, boolean lock) {
        BudgetItem entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Category category = loadCurrentOther(daoSession.getCategoryDao(), cursor, offset);
        entity.setCategory(category);
        offset += daoSession.getCategoryDao().getAllColumns().length;

        BusinessObjectBase businessObjectBase = loadCurrentOther(daoSession.getBusinessObjectBaseDao(), cursor, offset);
         if(businessObjectBase != null) {
            entity.setBusinessObjectBase(businessObjectBase);
        }

        return entity;    
    }

    public BudgetItem loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<BudgetItem> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<BudgetItem> list = new ArrayList<BudgetItem>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<BudgetItem> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<BudgetItem> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
