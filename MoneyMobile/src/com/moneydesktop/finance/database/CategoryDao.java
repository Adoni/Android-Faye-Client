package com.moneydesktop.finance.database;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

import com.moneydesktop.finance.database.Category;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CATEGORY.
*/
public class CategoryDao extends AbstractDao<Category, Long> {

    public static final String TABLENAME = "CATEGORY";

    /**
     * Properties of entity Category.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CategoryId = new Property(1, String.class, "categoryId", false, "CATEGORY_ID");
        public final static Property CategoryName = new Property(2, String.class, "categoryName", false, "CATEGORY_NAME");
        public final static Property CategoryNumber = new Property(3, String.class, "categoryNumber", false, "CATEGORY_NUMBER");
        public final static Property ImageName = new Property(4, String.class, "imageName", false, "IMAGE_NAME");
        public final static Property IsSystem = new Property(5, Boolean.class, "isSystem", false, "IS_SYSTEM");
        public final static Property IsTaxRelated = new Property(6, Boolean.class, "isTaxRelated", false, "IS_TAX_RELATED");
        public final static Property Notes = new Property(7, String.class, "notes", false, "NOTES");
        public final static Property SortOrder = new Property(8, Integer.class, "sortOrder", false, "SORT_ORDER");
        public final static Property TaxReference = new Property(9, String.class, "taxReference", false, "TAX_REFERENCE");
        public final static Property CategoryTypeId = new Property(10, Long.class, "categoryTypeId", false, "CATEGORY_TYPE_ID");
        public final static Property ParentCategoryId = new Property(11, Long.class, "parentCategoryId", false, "PARENT_CATEGORY_ID");
        public final static Property BusinessObjectId = new Property(12, long.class, "businessObjectId", false, "BUSINESS_OBJECT_ID");
    };

    private DaoSession daoSession;

    private Query<Category> categoryType_CategoriesQuery;
    private Query<Category> category_ChildrenQuery;

    public CategoryDao(DaoConfig config) {
        super(config);
    }
    
    public CategoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CATEGORY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CATEGORY_ID' TEXT," + // 1: categoryId
                "'CATEGORY_NAME' TEXT," + // 2: categoryName
                "'CATEGORY_NUMBER' TEXT," + // 3: categoryNumber
                "'IMAGE_NAME' TEXT," + // 4: imageName
                "'IS_SYSTEM' INTEGER," + // 5: isSystem
                "'IS_TAX_RELATED' INTEGER," + // 6: isTaxRelated
                "'NOTES' TEXT," + // 7: notes
                "'SORT_ORDER' INTEGER," + // 8: sortOrder
                "'TAX_REFERENCE' TEXT," + // 9: taxReference
                "'CATEGORY_TYPE_ID' INTEGER," + // 10: categoryTypeId
                "'PARENT_CATEGORY_ID' INTEGER," + // 11: parentCategoryId
                "'BUSINESS_OBJECT_ID' INTEGER NOT NULL );"); // 12: businessObjectId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CATEGORY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Category entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindString(2, categoryId);
        }
 
        String categoryName = entity.getCategoryName();
        if (categoryName != null) {
            stmt.bindString(3, categoryName);
        }
 
        String categoryNumber = entity.getCategoryNumber();
        if (categoryNumber != null) {
            stmt.bindString(4, categoryNumber);
        }
 
        String imageName = entity.getImageName();
        if (imageName != null) {
            stmt.bindString(5, imageName);
        }
 
        Boolean isSystem = entity.getIsSystem();
        if (isSystem != null) {
            stmt.bindLong(6, isSystem ? 1l: 0l);
        }
 
        Boolean isTaxRelated = entity.getIsTaxRelated();
        if (isTaxRelated != null) {
            stmt.bindLong(7, isTaxRelated ? 1l: 0l);
        }
 
        String notes = entity.getNotes();
        if (notes != null) {
            stmt.bindString(8, notes);
        }
 
        Integer sortOrder = entity.getSortOrder();
        if (sortOrder != null) {
            stmt.bindLong(9, sortOrder);
        }
 
        String taxReference = entity.getTaxReference();
        if (taxReference != null) {
            stmt.bindString(10, taxReference);
        }
 
        Long categoryTypeId = entity.getCategoryTypeId();
        if (categoryTypeId != null) {
            stmt.bindLong(11, categoryTypeId);
        }
 
        Long parentCategoryId = entity.getParentCategoryId();
        if (parentCategoryId != null) {
            stmt.bindLong(12, parentCategoryId);
        }
        stmt.bindLong(13, entity.getBusinessObjectId());
    }

    @Override
    protected void attachEntity(Category entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Category readEntity(Cursor cursor, int offset) {
        Category entity = new Category( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // categoryId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // categoryName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // categoryNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // imageName
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // isSystem
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // isTaxRelated
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // notes
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // sortOrder
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // taxReference
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // categoryTypeId
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // parentCategoryId
            cursor.getLong(offset + 12) // businessObjectId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Category entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCategoryId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCategoryName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCategoryNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImageName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsSystem(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setIsTaxRelated(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setNotes(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSortOrder(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setTaxReference(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCategoryTypeId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setParentCategoryId(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setBusinessObjectId(cursor.getLong(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Category entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Category entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "categories" to-many relationship of CategoryType. */
    public synchronized List<Category> _queryCategoryType_Categories(Long categoryTypeId) {
        if (categoryType_CategoriesQuery == null) {
            QueryBuilder<Category> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.CategoryTypeId.eq(categoryTypeId));
            categoryType_CategoriesQuery = queryBuilder.build();
        } else {
            categoryType_CategoriesQuery.setParameter(0, categoryTypeId);
        }
        return categoryType_CategoriesQuery.list();
    }

    /** Internal query to resolve the "children" to-many relationship of Category. */
    public synchronized List<Category> _queryCategory_Children(Long parentCategoryId) {
        if (category_ChildrenQuery == null) {
            QueryBuilder<Category> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.ParentCategoryId.eq(parentCategoryId));
            category_ChildrenQuery = queryBuilder.build();
        } else {
            category_ChildrenQuery.setParameter(0, parentCategoryId);
        }
        return category_ChildrenQuery.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCategoryTypeDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getCategoryDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getBusinessObjectBaseDao().getAllColumns());
            builder.append(" FROM CATEGORY T");
            builder.append(" LEFT JOIN CATEGORY_TYPE T0 ON T.'CATEGORY_TYPE_ID'=T0.'_id'");
            builder.append(" LEFT JOIN CATEGORY T1 ON T.'PARENT_CATEGORY_ID'=T1.'_id'");
            builder.append(" LEFT JOIN BUSINESS_OBJECT_BASE T2 ON T.'BUSINESS_OBJECT_ID'=T2.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Category loadCurrentDeep(Cursor cursor, boolean lock) {
        Category entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        CategoryType categoryType = loadCurrentOther(daoSession.getCategoryTypeDao(), cursor, offset);
        entity.setCategoryType(categoryType);
        offset += daoSession.getCategoryTypeDao().getAllColumns().length;

        Category parent = loadCurrentOther(daoSession.getCategoryDao(), cursor, offset);
        entity.setParent(parent);
        offset += daoSession.getCategoryDao().getAllColumns().length;

        BusinessObjectBase businessObjectBase = loadCurrentOther(daoSession.getBusinessObjectBaseDao(), cursor, offset);
         if(businessObjectBase != null) {
            entity.setBusinessObjectBase(businessObjectBase);
        }

        return entity;    
    }

    public Category loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Category> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Category> list = new ArrayList<Category>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Category> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Category> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
