package com.moneydesktop.finance.database;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import com.moneydesktop.finance.database.BusinessObjectBase;
import com.moneydesktop.finance.database.Tag;
import com.moneydesktop.finance.database.TagInstance;
import com.moneydesktop.finance.database.BankAccountBalance;
import com.moneydesktop.finance.database.Institution;
import com.moneydesktop.finance.database.Bank;
import com.moneydesktop.finance.database.BankAccount;
import com.moneydesktop.finance.database.AccountType;
import com.moneydesktop.finance.database.AccountTypeGroup;
import com.moneydesktop.finance.database.CategoryType;
import com.moneydesktop.finance.database.Category;
import com.moneydesktop.finance.database.Transactions;
import com.moneydesktop.finance.database.BudgetItem;
import com.moneydesktop.finance.database.Location;

import com.moneydesktop.finance.database.BusinessObjectBaseDao;
import com.moneydesktop.finance.database.TagDao;
import com.moneydesktop.finance.database.TagInstanceDao;
import com.moneydesktop.finance.database.BankAccountBalanceDao;
import com.moneydesktop.finance.database.InstitutionDao;
import com.moneydesktop.finance.database.BankDao;
import com.moneydesktop.finance.database.BankAccountDao;
import com.moneydesktop.finance.database.AccountTypeDao;
import com.moneydesktop.finance.database.AccountTypeGroupDao;
import com.moneydesktop.finance.database.CategoryTypeDao;
import com.moneydesktop.finance.database.CategoryDao;
import com.moneydesktop.finance.database.TransactionsDao;
import com.moneydesktop.finance.database.BudgetItemDao;
import com.moneydesktop.finance.database.LocationDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig businessObjectBaseDaoConfig;
    private final DaoConfig tagDaoConfig;
    private final DaoConfig tagInstanceDaoConfig;
    private final DaoConfig bankAccountBalanceDaoConfig;
    private final DaoConfig institutionDaoConfig;
    private final DaoConfig bankDaoConfig;
    private final DaoConfig bankAccountDaoConfig;
    private final DaoConfig accountTypeDaoConfig;
    private final DaoConfig accountTypeGroupDaoConfig;
    private final DaoConfig categoryTypeDaoConfig;
    private final DaoConfig categoryDaoConfig;
    private final DaoConfig transactionsDaoConfig;
    private final DaoConfig budgetItemDaoConfig;
    private final DaoConfig locationDaoConfig;

    private final BusinessObjectBaseDao businessObjectBaseDao;
    private final TagDao tagDao;
    private final TagInstanceDao tagInstanceDao;
    private final BankAccountBalanceDao bankAccountBalanceDao;
    private final InstitutionDao institutionDao;
    private final BankDao bankDao;
    private final BankAccountDao bankAccountDao;
    private final AccountTypeDao accountTypeDao;
    private final AccountTypeGroupDao accountTypeGroupDao;
    private final CategoryTypeDao categoryTypeDao;
    private final CategoryDao categoryDao;
    private final TransactionsDao transactionsDao;
    private final BudgetItemDao budgetItemDao;
    private final LocationDao locationDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        businessObjectBaseDaoConfig = daoConfigMap.get(BusinessObjectBaseDao.class).clone();
        businessObjectBaseDaoConfig.initIdentityScope(type);

        tagDaoConfig = daoConfigMap.get(TagDao.class).clone();
        tagDaoConfig.initIdentityScope(type);

        tagInstanceDaoConfig = daoConfigMap.get(TagInstanceDao.class).clone();
        tagInstanceDaoConfig.initIdentityScope(type);

        bankAccountBalanceDaoConfig = daoConfigMap.get(BankAccountBalanceDao.class).clone();
        bankAccountBalanceDaoConfig.initIdentityScope(type);

        institutionDaoConfig = daoConfigMap.get(InstitutionDao.class).clone();
        institutionDaoConfig.initIdentityScope(type);

        bankDaoConfig = daoConfigMap.get(BankDao.class).clone();
        bankDaoConfig.initIdentityScope(type);

        bankAccountDaoConfig = daoConfigMap.get(BankAccountDao.class).clone();
        bankAccountDaoConfig.initIdentityScope(type);

        accountTypeDaoConfig = daoConfigMap.get(AccountTypeDao.class).clone();
        accountTypeDaoConfig.initIdentityScope(type);

        accountTypeGroupDaoConfig = daoConfigMap.get(AccountTypeGroupDao.class).clone();
        accountTypeGroupDaoConfig.initIdentityScope(type);

        categoryTypeDaoConfig = daoConfigMap.get(CategoryTypeDao.class).clone();
        categoryTypeDaoConfig.initIdentityScope(type);

        categoryDaoConfig = daoConfigMap.get(CategoryDao.class).clone();
        categoryDaoConfig.initIdentityScope(type);

        transactionsDaoConfig = daoConfigMap.get(TransactionsDao.class).clone();
        transactionsDaoConfig.initIdentityScope(type);

        budgetItemDaoConfig = daoConfigMap.get(BudgetItemDao.class).clone();
        budgetItemDaoConfig.initIdentityScope(type);

        locationDaoConfig = daoConfigMap.get(LocationDao.class).clone();
        locationDaoConfig.initIdentityScope(type);

        businessObjectBaseDao = new BusinessObjectBaseDao(businessObjectBaseDaoConfig, this);
        tagDao = new TagDao(tagDaoConfig, this);
        tagInstanceDao = new TagInstanceDao(tagInstanceDaoConfig, this);
        bankAccountBalanceDao = new BankAccountBalanceDao(bankAccountBalanceDaoConfig, this);
        institutionDao = new InstitutionDao(institutionDaoConfig, this);
        bankDao = new BankDao(bankDaoConfig, this);
        bankAccountDao = new BankAccountDao(bankAccountDaoConfig, this);
        accountTypeDao = new AccountTypeDao(accountTypeDaoConfig, this);
        accountTypeGroupDao = new AccountTypeGroupDao(accountTypeGroupDaoConfig, this);
        categoryTypeDao = new CategoryTypeDao(categoryTypeDaoConfig, this);
        categoryDao = new CategoryDao(categoryDaoConfig, this);
        transactionsDao = new TransactionsDao(transactionsDaoConfig, this);
        budgetItemDao = new BudgetItemDao(budgetItemDaoConfig, this);
        locationDao = new LocationDao(locationDaoConfig, this);

        registerDao(BusinessObjectBase.class, businessObjectBaseDao);
        registerDao(Tag.class, tagDao);
        registerDao(TagInstance.class, tagInstanceDao);
        registerDao(BankAccountBalance.class, bankAccountBalanceDao);
        registerDao(Institution.class, institutionDao);
        registerDao(Bank.class, bankDao);
        registerDao(BankAccount.class, bankAccountDao);
        registerDao(AccountType.class, accountTypeDao);
        registerDao(AccountTypeGroup.class, accountTypeGroupDao);
        registerDao(CategoryType.class, categoryTypeDao);
        registerDao(Category.class, categoryDao);
        registerDao(Transactions.class, transactionsDao);
        registerDao(BudgetItem.class, budgetItemDao);
        registerDao(Location.class, locationDao);
    }
    
    public void clear() {
        businessObjectBaseDaoConfig.getIdentityScope().clear();
        tagDaoConfig.getIdentityScope().clear();
        tagInstanceDaoConfig.getIdentityScope().clear();
        bankAccountBalanceDaoConfig.getIdentityScope().clear();
        institutionDaoConfig.getIdentityScope().clear();
        bankDaoConfig.getIdentityScope().clear();
        bankAccountDaoConfig.getIdentityScope().clear();
        accountTypeDaoConfig.getIdentityScope().clear();
        accountTypeGroupDaoConfig.getIdentityScope().clear();
        categoryTypeDaoConfig.getIdentityScope().clear();
        categoryDaoConfig.getIdentityScope().clear();
        transactionsDaoConfig.getIdentityScope().clear();
        budgetItemDaoConfig.getIdentityScope().clear();
        locationDaoConfig.getIdentityScope().clear();
    }

    public BusinessObjectBaseDao getBusinessObjectBaseDao() {
        return businessObjectBaseDao;
    }

    public TagDao getTagDao() {
        return tagDao;
    }

    public TagInstanceDao getTagInstanceDao() {
        return tagInstanceDao;
    }

    public BankAccountBalanceDao getBankAccountBalanceDao() {
        return bankAccountBalanceDao;
    }

    public InstitutionDao getInstitutionDao() {
        return institutionDao;
    }

    public BankDao getBankDao() {
        return bankDao;
    }

    public BankAccountDao getBankAccountDao() {
        return bankAccountDao;
    }

    public AccountTypeDao getAccountTypeDao() {
        return accountTypeDao;
    }

    public AccountTypeGroupDao getAccountTypeGroupDao() {
        return accountTypeGroupDao;
    }

    public CategoryTypeDao getCategoryTypeDao() {
        return categoryTypeDao;
    }

    public CategoryDao getCategoryDao() {
        return categoryDao;
    }

    public TransactionsDao getTransactionsDao() {
        return transactionsDao;
    }

    public BudgetItemDao getBudgetItemDao() {
        return budgetItemDao;
    }

    public LocationDao getLocationDao() {
        return locationDao;
    }

}
