package com.moneydesktop.finance.database;

import java.util.ArrayList;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.moneydesktop.finance.data.Constant;
import com.moneydesktop.finance.data.DataController;
import com.moneydesktop.finance.data.Enums.DataState;
import com.moneydesktop.finance.model.User;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table TAG.
 */
public class Tag extends BusinessObject  {

    private Long id;
    private String tagId;
    private String tagName;
    private long businessObjectId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TagDao myDao;

    private BusinessObjectBase businessObjectBase;
    private Long businessObjectBase__resolvedKey;

    private List<TagInstance> tagInstances;

    // KEEP FIELDS - put your custom fields here
    private static QueryProperty sBusinessObjectBase = new QueryProperty(BusinessObjectBaseDao.TABLENAME, TagDao.Properties.BusinessObjectId, BusinessObjectBaseDao.Properties.Id);
    private static QueryProperty sDataState = new QueryProperty(BusinessObjectBaseDao.TABLENAME, BusinessObjectBaseDao.Properties.DataState, QueryProperty.NOT_EQUALS);
    private static QueryProperty sTagName = new QueryProperty(TagDao.TABLENAME, TagDao.Properties.TagName);
    // KEEP FIELDS END

    public Tag() {
    }

    public Tag(Long id) {
        this.id = id;
    }

    public Tag(Long id, String tagId, String tagName, long businessObjectId) {
        this.id = id;
        this.tagId = tagId;
        this.tagName = tagName;
        this.businessObjectId = businessObjectId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTagDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTagId() {
        return tagId;
    }

    public void setTagId(String tagId) {
        this.tagId = tagId;
    }

    public String getTagName() {
        return tagName;
    }

    public void setTagName(String tagName) {
        this.tagName = tagName;
    }

    public long getBusinessObjectId() {
        return businessObjectId;
    }

    public void setBusinessObjectId(long businessObjectId) {
        this.businessObjectId = businessObjectId;
    }

    /** To-one relationship, resolved on first access. */
    public BusinessObjectBase getBusinessObjectBase() {
        long __key = this.businessObjectId;
        if (businessObjectBase__resolvedKey == null || !businessObjectBase__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BusinessObjectBaseDao targetDao = daoSession.getBusinessObjectBaseDao();
            BusinessObjectBase businessObjectBaseNew = targetDao.load(__key);
            synchronized (this) {
                businessObjectBase = businessObjectBaseNew;
            	businessObjectBase__resolvedKey = __key;
            }
        }
        return businessObjectBase;
    }

    public void setBusinessObjectBase(BusinessObjectBase businessObjectBase) {
        if (businessObjectBase == null) {
            throw new DaoException("To-one property 'businessObjectId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.businessObjectBase = businessObjectBase;
            businessObjectId = businessObjectBase.getId();
            businessObjectBase__resolvedKey = businessObjectId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TagInstance> getTagInstances() {
        if (tagInstances == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TagInstanceDao targetDao = daoSession.getTagInstanceDao();
            List<TagInstance> tagInstancesNew = targetDao._queryTag_TagInstances(id);
            synchronized (this) {
                if(tagInstances == null) {
                    tagInstances = tagInstancesNew;
                }
            }
        }
        return tagInstances;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTagInstances() {
        tagInstances = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    
    public void setExternalId(String id) {
    	setTagId(id);
    	getBusinessObjectBase().setExternalId(id);
    }
    
    public String getExternalId() {
    	return getTagId();
    }
    
    public static Tag createTag(String tagName) {
        
        if (tagName == null || tagName.equals("")) return null;

		long id = DataController.createRandomGuid(Tag.class);
		
        Tag tag = new Tag(id);
        tag.setTagName(tagName);
        tag.setTagId(String.valueOf(id));
        tag.insertSingle();
        
        return tag;
    }
    
    public void tagObject(BusinessObjectBase base) {
        
        TagInstance ti = TagInstance.addTagInstance(base, this);
        ti.setBaseObjectId(base.getId());
        ti.setTag(this);

        base.updateBatch();
        base.resetTagInstances();
        
        DataController.save();
    }
    
    public void untagObject(BusinessObjectBase base) {
        
        TagInstance remove = null;
        
        for (TagInstance ti : base.getTagInstances()) {
            
            if (ti.getTagId() == getId()) {
                remove = ti;
                break;
            }
        }
        
        if (remove != null) {
            remove.softDeleteSingle();
            base.resetTagInstances();
            base.updateSingle();
        }
    }
    
    public static void deleteTag(final Tag tag) {
        
        if (tag == null) return;
        
        tag.softDeleteSingle();
        
        Thread thread = new Thread() {
            
            @Override
            public void run() {
                
                for (TagInstance ti : tag.getTagInstances()) {
                    ti.softDeleteBatch();
                }
                
                DataController.save();
            }
        };
        thread.start();
    }
    
    public static Tag saveTag(JSONObject json, boolean delete) {
    	
    	Tag tag = (Tag) saveObject(json, Tag.class, delete);

    	// Object was deleted no need to continue
    	if (tag == null) {
    		return null;
    	}
    	
    	tag.setTagName(json.optString(Constant.KEY_NAME));
    	tag.getBusinessObjectBase().setVersion(json.optInt(Constant.KEY_REVISION));
    	tag.acceptChanges();
    	
    	return tag;
    }
    
    public static void saveArrayOfTags(JSONArray tags, BusinessObjectBase bob) {
    	
    	
    	List<TagInstance> existingInstances = new ArrayList<TagInstance>();
    	
    	if (bob.hasSession()) {
    		existingInstances = bob.getTagInstances();
    	}
    	
    	for (int i = 0; i < tags.length(); i++) {
    		
    		JSONObject data = tags.optJSONObject(i);
    		
    		if (data != null && (data.optString(Constant.KEY_ASSOCIATION_DESTROYED).equals(Constant.VALUE_NULL) || !data.optBoolean(Constant.KEY_ASSOCIATION_DESTROYED))) {
    			
    			String tagId = data.optString(Constant.KEY_GUID);
    			
    			TagInstance ti = null;
    			
    			if (!bob.hasSession() || !bob.containsTag(tagId)) {
    				
    				Tag tag = (Tag) getObject(Tag.class, tagId);
    				
    				if (tag != null) {
    					
    					ti = TagInstance.addTagInstance(bob, tag);
    					existingInstances.remove(ti);
    				}
    				
    			} else if ((ti = TagInstance.getTagInstance(bob, tagId)) != null) {
    				
    				existingInstances.remove(ti);
    			}
    		}
    	}
    	
    	for (TagInstance ti : existingInstances) {
    		ti.deleteBatch();
    	}
    }
    
    public JSONObject getJson() throws JSONException {
    	
    	JSONObject json = new JSONObject();
    	
    	json.put(Constant.KEY_GUID, getTagId() != null ? getTagId() : null);
    	json.put(Constant.KEY_IS_DELETED, 0);
    	
    	if (getExternalId() != null)
    		json.put(Constant.KEY_EXTERNAL_ID, getExternalId());
    	
    	if (getBusinessObjectBase().getDataStateEnum() == DataState.DATA_STATE_DELETED || isDeleted()) {
    		
        	json.put(Constant.KEY_IS_DELETED, 1);
        	
    		return json;
    	
    	} else if (getBusinessObjectBase().getDataStateEnum() == DataState.DATA_STATE_NEW) {
    		
    		json.put(Constant.KEY_GUID, null);
    	}
    	
    	if (getTagName() != null)
    		json.put(Constant.KEY_NAME, getTagName());
    	
    	json.put(Constant.KEY_USER_GUID, User.getCurrentUser().getUserId());
    	json.put(Constant.KEY_REVISION, getBusinessObjectBase().getVersion());
    	
    	return json;
    }
    
    public static List<Tag> loadAll() {
        TagDao tagDao = (TagDao) DataController.getDao(Tag.class);
        PowerQuery query = new PowerQuery(tagDao);
        query.join(sBusinessObjectBase)
            .where(sDataState, Integer.toString(DataState.DATA_STATE_DELETED.index()))
            .orderBy(sTagName, false);
        
        return tagDao.queryRaw(query.toString(), query.getSelectionArgs());
    }
    // KEEP METHODS END

}
