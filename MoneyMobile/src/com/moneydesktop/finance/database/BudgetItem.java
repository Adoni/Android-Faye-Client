package com.moneydesktop.finance.database;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;
// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
// KEEP INCLUDES - put your custom includes here
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;

import org.json.JSONObject;

import com.moneydesktop.finance.data.Constant;
// KEEP INCLUDES END
/**
 * Entity mapped to table BUDGET_ITEM.
 */
public class BudgetItem extends BusinessObject  {

    private Long id;
    private Double amount;
    private String budgetItemId;
    private Boolean isActive;
    private Boolean isDefault;
    private Long categoryId;
    private long businessObjectId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient BudgetItemDao myDao;

    private Category category;
    private Long category__resolvedKey;

    private BusinessObjectBase businessObjectBase;
    private Long businessObjectBase__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public BudgetItem() {
    }

    public BudgetItem(Long id) {
        this.id = id;
    }

    public BudgetItem(Long id, Double amount, String budgetItemId, Boolean isActive, Boolean isDefault, Long categoryId, long businessObjectId) {
        this.id = id;
        this.amount = amount;
        this.budgetItemId = budgetItemId;
        this.isActive = isActive;
        this.isDefault = isDefault;
        this.categoryId = categoryId;
        this.businessObjectId = businessObjectId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBudgetItemDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Double getAmount() {
        return amount;
    }

    public void setAmount(Double amount) {
        this.amount = amount;
    }

    public String getBudgetItemId() {
        return budgetItemId;
    }

    public void setBudgetItemId(String budgetItemId) {
        this.budgetItemId = budgetItemId;
    }

    public Boolean getIsActive() {
        return isActive;
    }

    public void setIsActive(Boolean isActive) {
        this.isActive = isActive;
    }

    public Boolean getIsDefault() {
        return isDefault;
    }

    public void setIsDefault(Boolean isDefault) {
        this.isDefault = isDefault;
    }

    public Long getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(Long categoryId) {
        this.categoryId = categoryId;
    }

    public long getBusinessObjectId() {
        return businessObjectId;
    }

    public void setBusinessObjectId(long businessObjectId) {
        this.businessObjectId = businessObjectId;
    }

    /** To-one relationship, resolved on first access. */
    public Category getCategory() {
        if (category__resolvedKey == null || !category__resolvedKey.equals(categoryId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoryDao targetDao = daoSession.getCategoryDao();
            category = targetDao.load(categoryId);
            category__resolvedKey = categoryId;
        }
        return category;
    }

    public void setCategory(Category category) {
        this.category = category;
        categoryId = category == null ? null : category.getId();
        category__resolvedKey = categoryId;
    }

    /** To-one relationship, resolved on first access. */
    public BusinessObjectBase getBusinessObjectBase() {
        if (businessObjectBase__resolvedKey == null || !businessObjectBase__resolvedKey.equals(businessObjectId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BusinessObjectBaseDao targetDao = daoSession.getBusinessObjectBaseDao();
            businessObjectBase = targetDao.load(businessObjectId);
            businessObjectBase__resolvedKey = businessObjectId;
        }
        return businessObjectBase;
    }

    public void setBusinessObjectBase(BusinessObjectBase businessObjectBase) {
        if (businessObjectBase == null) {
            throw new DaoException("To-one property 'businessObjectId' has not-null constraint; cannot set to-one to null");
        }
        this.businessObjectBase = businessObjectBase;
        businessObjectId = businessObjectBase.getId();
        businessObjectBase__resolvedKey = businessObjectId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    
    public void setExternalId(String id) {
    	setBudgetItemId(id);
    }
    
    public String getExternalId() {
    	return getBudgetItemId();
    }
    
    public static BudgetItem saveBudgetItem(JSONObject json, boolean delete) {
    	
    	BudgetItem budgetItem = (BudgetItem) saveObject(json, BudgetItem.class, delete);
    	
    	// Object was deleted no need to continue
    	if (budgetItem == null)
    		return null;

    	Category category = (Category) getObject(Category.class, json.optString(Constant.KEY_CATEGORY_GUID));
    	
    	if (category != null) {
    		
    		budgetItem.setCategoryId(category.getId());
    		category.acceptChanges();
    		category.updateBatch();
    	}
    	
    	budgetItem.getBusinessObjectBase().setVersion(json.optInt(Constant.KEY_REVISION));
    	budgetItem.setAmount(json.optDouble(Constant.KEY_AMOUNT));
    	budgetItem.setIsActive(true);
    	budgetItem.setIsDefault(true);
    	
    	budgetItem.acceptChanges();

    	return budgetItem;
    }
    
    // KEEP METHODS END

}
