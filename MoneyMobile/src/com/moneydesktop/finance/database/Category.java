
package com.moneydesktop.finance.database;

import com.moneydesktop.finance.data.Constant;
import com.moneydesktop.finance.model.User;
import com.moneydesktop.finance.util.Enums.DataState;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.List;
// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table CATEGORY.
 */
public class Category extends BusinessObject {

    private Long id;
    private String categoryId;
    private String categoryName;
    private String categoryNumber;
    private String imageName;
    private Boolean isSystem;
    private Boolean isTaxRelated;
    private String notes;
    private Integer sortOrder;
    private String taxReference;
    private Long categoryTypeId;
    private Long parentCategoryId;
    private long businessObjectId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CategoryDao myDao;

    private CategoryType categoryType;
    private Long categoryType__resolvedKey;

    private Category parent;
    private Long parent__resolvedKey;

    private BusinessObjectBase businessObjectBase;
    private Long businessObjectBase__resolvedKey;

    private List<Category> children;
    private List<Transactions> transactions;
    private List<BudgetItem> budgetItems;

    // KEEP FIELDS - put your custom fields here

    public static final String TAG = "Category";

    // KEEP FIELDS END

    public Category() {
    }

    public Category(Long id) {
        this.id = id;
    }

    public Category(Long id, String categoryId, String categoryName, String categoryNumber,
            String imageName, Boolean isSystem, Boolean isTaxRelated, String notes,
            Integer sortOrder, String taxReference, Long categoryTypeId, Long parentCategoryId,
            long businessObjectId) {
        this.id = id;
        this.categoryId = categoryId;
        this.categoryName = categoryName;
        this.categoryNumber = categoryNumber;
        this.imageName = imageName;
        this.isSystem = isSystem;
        this.isTaxRelated = isTaxRelated;
        this.notes = notes;
        this.sortOrder = sortOrder;
        this.taxReference = taxReference;
        this.categoryTypeId = categoryTypeId;
        this.parentCategoryId = parentCategoryId;
        this.businessObjectId = businessObjectId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCategoryDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(String categoryId) {
        this.categoryId = categoryId;
    }

    public String getCategoryName() {
        return categoryName;
    }

    public void setCategoryName(String categoryName) {
        this.categoryName = categoryName;
    }

    public String getCategoryNumber() {
        return categoryNumber;
    }

    public void setCategoryNumber(String categoryNumber) {
        this.categoryNumber = categoryNumber;
    }

    public String getImageName() {
        return imageName;
    }

    public void setImageName(String imageName) {
        this.imageName = imageName;
    }

    public Boolean getIsSystem() {
        return isSystem;
    }

    public void setIsSystem(Boolean isSystem) {
        this.isSystem = isSystem;
    }

    public Boolean getIsTaxRelated() {
        return isTaxRelated;
    }

    public void setIsTaxRelated(Boolean isTaxRelated) {
        this.isTaxRelated = isTaxRelated;
    }

    public String getNotes() {
        return notes;
    }

    public void setNotes(String notes) {
        this.notes = notes;
    }

    public Integer getSortOrder() {
        return sortOrder;
    }

    public void setSortOrder(Integer sortOrder) {
        this.sortOrder = sortOrder;
    }

    public String getTaxReference() {
        return taxReference;
    }

    public void setTaxReference(String taxReference) {
        this.taxReference = taxReference;
    }

    public Long getCategoryTypeId() {
        return categoryTypeId;
    }

    public void setCategoryTypeId(Long categoryTypeId) {
        this.categoryTypeId = categoryTypeId;
    }

    public Long getParentCategoryId() {
        return parentCategoryId;
    }

    public void setParentCategoryId(Long parentCategoryId) {
        this.parentCategoryId = parentCategoryId;
    }

    @Override
    public long getBusinessObjectId() {
        return businessObjectId;
    }

    @Override
    public void setBusinessObjectId(long businessObjectId) {
        this.businessObjectId = businessObjectId;
    }

    /** To-one relationship, resolved on first access. */
    public CategoryType getCategoryType() {
        if (categoryType__resolvedKey == null || !categoryType__resolvedKey.equals(categoryTypeId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoryTypeDao targetDao = daoSession.getCategoryTypeDao();
            categoryType = targetDao.load(categoryTypeId);
            categoryType__resolvedKey = categoryTypeId;
        }
        return categoryType;
    }

    public void setCategoryType(CategoryType categoryType) {
        this.categoryType = categoryType;
        categoryTypeId = categoryType == null ? null : categoryType.getId();
        categoryType__resolvedKey = categoryTypeId;
    }

    /** To-one relationship, resolved on first access. */
    public Category getParent() {
        if (parent__resolvedKey == null || !parent__resolvedKey.equals(parentCategoryId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoryDao targetDao = daoSession.getCategoryDao();
            parent = targetDao.load(parentCategoryId);
            parent__resolvedKey = parentCategoryId;
        }
        return parent;
    }

    public void setParent(Category parent) {
        this.parent = parent;
        parentCategoryId = parent == null ? null : parent.getId();
        parent__resolvedKey = parentCategoryId;
    }

    /** To-one relationship, resolved on first access. */
    @Override
    public BusinessObjectBase getBusinessObjectBase() {
        if (businessObjectBase__resolvedKey == null
                || !businessObjectBase__resolvedKey.equals(businessObjectId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BusinessObjectBaseDao targetDao = daoSession.getBusinessObjectBaseDao();
            businessObjectBase = targetDao.load(businessObjectId);
            businessObjectBase__resolvedKey = businessObjectId;
        }
        return businessObjectBase;
    }

    @Override
    public void setBusinessObjectBase(BusinessObjectBase businessObjectBase) {
        if (businessObjectBase == null) {
            throw new DaoException(
                    "To-one property 'businessObjectId' has not-null constraint; cannot set to-one to null");
        }
        this.businessObjectBase = businessObjectBase;
        businessObjectId = businessObjectBase.getId();
        businessObjectBase__resolvedKey = businessObjectId;
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes
     * to to-many relations are not persisted, make changes to the target
     * entity.
     */
    public synchronized List<Category> getChildren() {
        if (children == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoryDao targetDao = daoSession.getCategoryDao();
            children = targetDao._queryCategory_Children(id);
        }
        return children;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a
     * fresh result.
     */
    public synchronized void resetChildren() {
        children = null;
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes
     * to to-many relations are not persisted, make changes to the target
     * entity.
     */
    public synchronized List<Transactions> getTransactions() {
        if (transactions == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TransactionsDao targetDao = daoSession.getTransactionsDao();
            transactions = targetDao._queryCategory_Transactions(id);
        }
        return transactions;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a
     * fresh result.
     */
    public synchronized void resetTransactions() {
        transactions = null;
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes
     * to to-many relations are not persisted, make changes to the target
     * entity.
     */
    public synchronized List<BudgetItem> getBudgetItems() {
        if (budgetItems == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BudgetItemDao targetDao = daoSession.getBudgetItemDao();
            budgetItems = targetDao._queryCategory_BudgetItems(id);
        }
        return budgetItems;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a
     * fresh result.
     */
    public synchronized void resetBudgetItems() {
        budgetItems = null;
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must
     * attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must
     * attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must
     * attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    @Override
    public void setExternalId(String id) {
        setCategoryId(id);
        getBusinessObjectBase().setExternalId(id);
    }

    @Override
    public String getExternalId() {
        return getCategoryId();
    }

    public static Category saveCategory(JSONObject json, boolean delete) {

        Category category = (Category) saveObject(json, Category.class, delete);

        // Object was deleted no need to continue
        if (category == null)
            return null;

        category.setCategoryName(json.optString(Constant.KEY_NAME));
        category.setIsSystem(User.getCurrentUser().getUserId()
                .equals(json.optString(Constant.KEY_USER_GUID)));

        String parentGuid = json.optString(Constant.KEY_PARENT_GUID);

        if (!parentGuid.equals(Constant.VALUE_NULL)) {

            Category parent = (Category) getObject(Category.class, parentGuid);

            if (parent != null) {

                category.setParent(parent);
                parent.acceptChanges();
                parent.updateBatch();
            }
        }

        String imageName = String.format("%s.png", category.getCategoryId());
        category.setImageName(imageName);

        boolean isIncome = json.optBoolean(Constant.KEY_INCOME);

        CategoryType categoryType = (CategoryType) getObject(CategoryType.class, isIncome ? "1"
                : "2");

        if (categoryType != null) {

            category.setCategoryType(categoryType);
            categoryType.acceptChanges();
            categoryType.updateBatch();
        }

        category.acceptChanges();

        return category;
    }

    @Override
    public JSONObject getJson() throws JSONException {

        JSONObject json = new JSONObject();

        if (getBusinessObjectBase().getDataStateEnum() == DataState.DATA_STATE_DELETED) {

            if (getCategoryId() != null)
                json.put(Constant.KEY_GUID, getCategoryId());

            return json;
        }

        if (getBusinessObjectBase().getDataStateEnum() != DataState.DATA_STATE_NEW
                && getCategoryId() != null)
            json.put(Constant.KEY_GUID, getCategoryId());

        if (getCategoryName() != null)
            json.put(Constant.KEY_NAME, getCategoryName());

        if (getCategoryType() != null && getCategoryType().getCategoryTypeId() != null)
            json.put(Constant.KEY_INCOME,
                    (Integer.parseInt(getCategoryType().getCategoryTypeId()) == 1) ? 1 : 0);

        if (getParent() != null)
            json.put(Constant.KEY_PARENT_GUID, getParent().getCategoryId());

        if (getExternalId() != null)
            json.put(Constant.KEY_EXTERNAL_ID, getExternalId());

        json.put(Constant.KEY_IS_DELETED, isDeleted() ? 1 : 0);
        json.put(Constant.KEY_REVISION, getBusinessObjectBase().getVersion());
        json.put(Constant.KEY_USER_GUID, User.getCurrentUser().getUserId());

        return json;
    }/*
      * private static final HashMap<String, HashMap> simpleCategories = new
      * HashMap<String, HashMap>(); static { // refer to
      * https://git.moneydesktop
      * .com/dev/abacus/blob/master/config/initializers/category_constants.rb //
      * 1 is for Autos
      * simpleCategories.put("CAT-7829f71c-2e8c-afa5-2f55-fa3634b89874",);
      * simpleCategories.put("CAT-de7c2dc7-90e6-85a2-6509-5ec10942e887",1);
      * simpleCategories.put("CAT-cb93691a-684d-b326-4c32-f8abaecfde90",1);
      * simpleCategories.put("CAT-b6d63a19-30a7-e852-2703-bdfb4072289e",1);
      * simpleCategories.put("CAT-726da718-d572-1e4d-7c3f-0b8b5370fe71",1);
      * simpleCategories.put("CAT-19e6ec13-83ed-5511-7f75-3688d3f97a8e",1);
      * simpleCategories.put("CAT-67a20fb1-1a61-dc27-3fff-f28fa904025f",1); //2
      * is for Bills and Utilities
      * simpleCategories.put("CAT-79b02f2f-2adc-88f0-ac2b-4e71ead9cfc8",2);
      * simpleCategories.put("CAT-e7c5ebc7-f73d-955a-db06-3724bbcf6faa",2);
      * simpleCategories.put("CAT-5f7f2084-6f8a-d927-6fa7-8e699912432a",2);
      * simpleCategories.put("CAT-60d81dd3-8ac1-a6fb-b181-b736dbb42be3",2);
      * simpleCategories.put("CAT-b74fdd98-4391-8015-eafa-e9ca0fad3bee",2);
      * simpleCategories.put("CAT-78d29c63-54db-197d-9851-feeb94cf6e10",2);
      * simpleCategories.put("CAT-b4789667-6acc-a112-975e-15746003ed61",2);
      * simpleCategories.put("CAT-b316e683-c898-6497-a476-6bc48d12e51d",2);
      * simpleCategories.put("CAT-56a2979d-d6df-25da-f357-06282f08208e",2); //3
      * is for Business Services
      * simpleCategories.put("CAT-94b11142-e97b-941a-f67f-6e18d246a23f",3);
      * simpleCategories.put("CAT-e6682ebe-f239-c654-8233-0970b94cc162",3);
      * simpleCategories.put("CAT-13c1e57c-3749-41b4-3bc4-b1b334adab85",3);
      * simpleCategories.put("CAT-97a2b899-5a32-4196-b87c-a8e65d8a9849",3);
      * simpleCategories.put("CAT-3b09fb0b-3296-c76c-2bbd-a2bce0012d83",3);
      * simpleCategories.put("CAT-748efd05-e27a-5c79-1217-681a0ec5cc67",3); //4
      * is for Education }
      */
    // KEEP METHODS END

}
