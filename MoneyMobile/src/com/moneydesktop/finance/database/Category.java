package com.moneydesktop.finance.database;

import java.util.List;

import org.json.JSONObject;

import com.moneydesktop.finance.ApplicationContext;
import com.moneydesktop.finance.data.Constant;
import com.moneydesktop.finance.database.BudgetItemDao.Properties;
import com.moneydesktop.finance.model.User;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;
import de.greenrobot.dao.Query;
// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table CATEGORY.
 */
public class Category implements BusinessObjectInterface {

    private Long id;
    private String categoryId;
    private String categoryName;
    private String categoryNumber;
    private String imageName;
    private Boolean isSystem;
    private Boolean isTaxRelated;
    private String notes;
    private Integer sortOrder;
    private String taxReference;
    private Long categoryTypeId;
    private Long parentCategoryId;
    private long businessObjectId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CategoryDao myDao;

    private CategoryType categoryType;
    private Long categoryType__resolvedKey;

    private Category parent;
    private Long parent__resolvedKey;

    private BusinessObjectBase businessObjectBase;
    private Long businessObjectBase__resolvedKey;

    private List<Category> children;
    private List<Transaction> transactions;
    private List<BudgetItem> budgetItems;

    // KEEP FIELDS - put your custom fields here
    
	private static final String TAG = "Category";
	
	private static Query<Category> queryId = null;
	
    // KEEP FIELDS END

    public Category() {
    }

    public Category(Long id) {
        this.id = id;
    }

    public Category(Long id, String categoryId, String categoryName, String categoryNumber, String imageName, Boolean isSystem, Boolean isTaxRelated, String notes, Integer sortOrder, String taxReference, Long categoryTypeId, Long parentCategoryId, long businessObjectId) {
        this.id = id;
        this.categoryId = categoryId;
        this.categoryName = categoryName;
        this.categoryNumber = categoryNumber;
        this.imageName = imageName;
        this.isSystem = isSystem;
        this.isTaxRelated = isTaxRelated;
        this.notes = notes;
        this.sortOrder = sortOrder;
        this.taxReference = taxReference;
        this.categoryTypeId = categoryTypeId;
        this.parentCategoryId = parentCategoryId;
        this.businessObjectId = businessObjectId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCategoryDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(String categoryId) {
        this.categoryId = categoryId;
    }

    public String getCategoryName() {
        return categoryName;
    }

    public void setCategoryName(String categoryName) {
        this.categoryName = categoryName;
    }

    public String getCategoryNumber() {
        return categoryNumber;
    }

    public void setCategoryNumber(String categoryNumber) {
        this.categoryNumber = categoryNumber;
    }

    public String getImageName() {
        return imageName;
    }

    public void setImageName(String imageName) {
        this.imageName = imageName;
    }

    public Boolean getIsSystem() {
        return isSystem;
    }

    public void setIsSystem(Boolean isSystem) {
        this.isSystem = isSystem;
    }

    public Boolean getIsTaxRelated() {
        return isTaxRelated;
    }

    public void setIsTaxRelated(Boolean isTaxRelated) {
        this.isTaxRelated = isTaxRelated;
    }

    public String getNotes() {
        return notes;
    }

    public void setNotes(String notes) {
        this.notes = notes;
    }

    public Integer getSortOrder() {
        return sortOrder;
    }

    public void setSortOrder(Integer sortOrder) {
        this.sortOrder = sortOrder;
    }

    public String getTaxReference() {
        return taxReference;
    }

    public void setTaxReference(String taxReference) {
        this.taxReference = taxReference;
    }

    public Long getCategoryTypeId() {
        return categoryTypeId;
    }

    public void setCategoryTypeId(Long categoryTypeId) {
        this.categoryTypeId = categoryTypeId;
    }

    public Long getParentCategoryId() {
        return parentCategoryId;
    }

    public void setParentCategoryId(Long parentCategoryId) {
        this.parentCategoryId = parentCategoryId;
    }

    public long getBusinessObjectId() {
        return businessObjectId;
    }

    public void setBusinessObjectId(long businessObjectId) {
        this.businessObjectId = businessObjectId;
    }

    /** To-one relationship, resolved on first access. */
    public CategoryType getCategoryType() {
        if (categoryType__resolvedKey == null || !categoryType__resolvedKey.equals(categoryTypeId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoryTypeDao targetDao = daoSession.getCategoryTypeDao();
            categoryType = targetDao.load(categoryTypeId);
            categoryType__resolvedKey = categoryTypeId;
        }
        return categoryType;
    }

    public void setCategoryType(CategoryType categoryType) {
        this.categoryType = categoryType;
        categoryTypeId = categoryType == null ? null : categoryType.getId();
        categoryType__resolvedKey = categoryTypeId;
    }

    /** To-one relationship, resolved on first access. */
    public Category getParent() {
        if (parent__resolvedKey == null || !parent__resolvedKey.equals(parentCategoryId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoryDao targetDao = daoSession.getCategoryDao();
            parent = targetDao.load(parentCategoryId);
            parent__resolvedKey = parentCategoryId;
        }
        return parent;
    }

    public void setParent(Category parent) {
        this.parent = parent;
        parentCategoryId = parent == null ? null : parent.getId();
        parent__resolvedKey = parentCategoryId;
    }

    /** To-one relationship, resolved on first access. */
    public BusinessObjectBase getBusinessObjectBase() {
        if (businessObjectBase__resolvedKey == null || !businessObjectBase__resolvedKey.equals(businessObjectId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BusinessObjectBaseDao targetDao = daoSession.getBusinessObjectBaseDao();
            businessObjectBase = targetDao.load(businessObjectId);
            businessObjectBase__resolvedKey = businessObjectId;
        }
        return businessObjectBase;
    }

    public void setBusinessObjectBase(BusinessObjectBase businessObjectBase) {
        if (businessObjectBase == null) {
            throw new DaoException("To-one property 'businessObjectId' has not-null constraint; cannot set to-one to null");
        }
        this.businessObjectBase = businessObjectBase;
        businessObjectId = businessObjectBase.getId();
        businessObjectBase__resolvedKey = businessObjectId;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<Category> getChildren() {
        if (children == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoryDao targetDao = daoSession.getCategoryDao();
            children = targetDao._queryCategory_Children(id);
        }
        return children;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetChildren() {
        children = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<Transaction> getTransactions() {
        if (transactions == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TransactionDao targetDao = daoSession.getTransactionDao();
            transactions = targetDao._queryCategory_Transactions(id);
        }
        return transactions;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTransactions() {
        transactions = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<BudgetItem> getBudgetItems() {
        if (budgetItems == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BudgetItemDao targetDao = daoSession.getBudgetItemDao();
            budgetItems = targetDao._queryCategory_BudgetItems(id);
        }
        return budgetItems;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetBudgetItems() {
        budgetItems = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    
    public static Category getCategory(String categoryId) {
    	
    	Category category = null;
    	
    	if (categoryId == null || categoryId.equals(""))
    		return category;
    	
    	category = getQuery(Long.valueOf(categoryId.hashCode())).unique();
    	
    	if (category == null)
    		category = (Category) DataController.getFromCache(categoryId);
    	
    	return category;
    }
    
    public static Query<Category> getQuery(Long categoryId) {
    		
    	if (queryId == null) {

    		CategoryDao catDao = ApplicationContext.getDaoSession().getCategoryDao();
    		queryId = catDao.queryBuilder().where(Properties.Id.eq(categoryId)).build();
    		
    	} else {
    		
    		queryId.setParameter(0, categoryId);
    	}
    	
    	return queryId;
    }
    
    public static Category saveCategory(JSONObject json, boolean delete) {
    	
    	boolean inserting = false;
    	
    	String guid = json.optString(Constant.KEY_GUID);
    	Category category = getCategory(guid);
    	
    	// Object does not exist return null, no action required
    	if (category == null && delete)
    		return null;
    	
    	// Object exists, delete it
    	else if (category != null && delete) {
    		
    		DataController.delete(category.getBusinessObjectBase());
    		DataController.delete(category);
    		
    		return null;
    	}
    	
    	if (category == null) {
    		
    		inserting = true;
    		
    		category = new Category(Long.valueOf(guid.hashCode()));
    		category.setCategoryId(guid);
    		
    		BusinessObjectBase bob = new BusinessObjectBase();
    		bob.setExternalId(guid);
    		ApplicationContext.getDaoSession().getBusinessObjectBaseDao().insert(bob);
    		
    		category.setBusinessObjectBase(bob);
    	}
    	
    	category.setCategoryName(json.optString(Constant.KEY_NAME));
    	category.setIsSystem(User.getCurrentUser().getUserId().equals(json.optString(Constant.KEY_USER_GUID)));
    	
    	String parentGuid = json.optString(Constant.KEY_PARENT_GUID);
    	
    	if (!parentGuid.equals(Constant.VALUE_NULL)) {
    		
    		Category parent = getCategory(parentGuid);
    		
    		if (parent != null) {
    			
    			category.setParent(parent);
    			// TODO: parent.acceptChanges(); (see Categories.m: 549)
    		}
    	}
    	
    	String imageName = String.format("%s.png", category.getCategoryId());
    	category.setImageName(imageName);
    	
    	boolean isIncome = json.optBoolean(Constant.KEY_INCOME);
    	
    	CategoryType categoryType = CategoryType.getCategoryType(isIncome ? "1" : "2");
    	
    	if (categoryType != null) {
    		
    		category.setCategoryType(categoryType);
    		// TODO: categoryType.accecptChanges();
    	}
    	
    	// TODO: category.acceptChanges();
    	
    	if (inserting)
    		DataController.insert(category);
    	else
    		DataController.update(category);
    	
    	return category;
    }
    
    // KEEP METHODS END

}
