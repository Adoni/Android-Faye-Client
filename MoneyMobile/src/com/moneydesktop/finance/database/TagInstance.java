package com.moneydesktop.finance.database;

import com.moneydesktop.finance.data.Constant;
import com.moneydesktop.finance.util.Enums.DataState;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

import org.json.JSONException;
import org.json.JSONObject;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table TAG_INSTANCE.
 */
public class TagInstance extends BusinessObject  {

    private Long id;
    private long tagId;
    private long baseObjectId;
    private long businessObjectId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TagInstanceDao myDao;

    private Tag tag;
    private Long tag__resolvedKey;

    private BusinessObjectBase businessObject;
    private Long businessObject__resolvedKey;

    private BusinessObjectBase businessObjectBase;
    private Long businessObjectBase__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public TagInstance() {
    }

    public TagInstance(Long id) {
        this.id = id;
    }

    public TagInstance(Long id, long tagId, long baseObjectId, long businessObjectId) {
        this.id = id;
        this.tagId = tagId;
        this.baseObjectId = baseObjectId;
        this.businessObjectId = businessObjectId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTagInstanceDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getTagId() {
        return tagId;
    }

    public void setTagId(long tagId) {
        this.tagId = tagId;
    }

    public long getBaseObjectId() {
        return baseObjectId;
    }

    public void setBaseObjectId(long baseObjectId) {
        this.baseObjectId = baseObjectId;
    }

    public long getBusinessObjectId() {
        return businessObjectId;
    }

    public void setBusinessObjectId(long businessObjectId) {
        this.businessObjectId = businessObjectId;
    }

    /** To-one relationship, resolved on first access. */
    public Tag getTag() {
        if (tag__resolvedKey == null || !tag__resolvedKey.equals(tagId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TagDao targetDao = daoSession.getTagDao();
            tag = targetDao.load(tagId);
            tag__resolvedKey = tagId;
        }
        return tag;
    }

    public void setTag(Tag tag) {
        if (tag == null) {
            throw new DaoException("To-one property 'tagId' has not-null constraint; cannot set to-one to null");
        }
        this.tag = tag;
        tagId = tag.getId();
        tag__resolvedKey = tagId;
    }

    /** To-one relationship, resolved on first access. */
    public BusinessObjectBase getBusinessObject() {
        if (businessObject__resolvedKey == null || !businessObject__resolvedKey.equals(baseObjectId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BusinessObjectBaseDao targetDao = daoSession.getBusinessObjectBaseDao();
            businessObject = targetDao.load(baseObjectId);
            businessObject__resolvedKey = baseObjectId;
        }
        return businessObject;
    }

    public void setBusinessObject(BusinessObjectBase businessObject) {
        if (businessObject == null) {
            throw new DaoException("To-one property 'baseObjectId' has not-null constraint; cannot set to-one to null");
        }
        this.businessObject = businessObject;
        baseObjectId = businessObject.getId();
        businessObject__resolvedKey = baseObjectId;
    }

    /** To-one relationship, resolved on first access. */
    public BusinessObjectBase getBusinessObjectBase() {
        if (businessObjectBase__resolvedKey == null || !businessObjectBase__resolvedKey.equals(businessObjectId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BusinessObjectBaseDao targetDao = daoSession.getBusinessObjectBaseDao();
            businessObjectBase = targetDao.load(businessObjectId);
            businessObjectBase__resolvedKey = businessObjectId;
        }
        return businessObjectBase;
    }

    public void setBusinessObjectBase(BusinessObjectBase businessObjectBase) {
        if (businessObjectBase == null) {
            throw new DaoException("To-one property 'businessObjectId' has not-null constraint; cannot set to-one to null");
        }
        this.businessObjectBase = businessObjectBase;
        businessObjectId = businessObjectBase.getId();
        businessObjectBase__resolvedKey = businessObjectId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    
    public void setExternalId(String id) {

    	getBusinessObjectBase().setExternalId(id);
    }
    
    public String getExternalId() {
    	return getBusinessObjectBase().getExternalId();
    }
    
    public static TagInstance createTagInstance(BusinessObjectBase bob, Tag tag) {
    	
    	TagInstance tagInstance = new TagInstance();
    	tagInstance.setTag(tag);
    	tagInstance.setBusinessObjectBase(bob);
    	
    	tagInstance.insertBatch();
    	
    	return tagInstance;
    }
    
    public JSONObject getJson() throws JSONException {
    	
    	JSONObject json = new JSONObject();
    	
		json.put(Constant.KEY_GUID, getTagId());
		
		if (getExternalId() != null)
			json.put(Constant.KEY_EXTERNAL_ID, getExternalId());
    	
    	if (getBusinessObject().getDataStateEnum() == DataState.DATA_STATE_DELETED)
    		json.put(Constant.KEY_ASSOCIATION_DESTROYED, 1);
    	
    	return json;
    }
    // KEEP METHODS END

}
