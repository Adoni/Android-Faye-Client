package com.moneydesktop.finance.database;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

import com.moneydesktop.finance.database.AccountType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ACCOUNT_TYPE.
*/
public class AccountTypeDao extends AbstractDao<AccountType, Long> {

    public static final String TABLENAME = "ACCOUNT_TYPE";

    /**
     * Properties of entity AccountType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AccountTypeName = new Property(1, String.class, "accountTypeName", false, "ACCOUNT_TYPE_NAME");
        public final static Property AggregationType = new Property(2, Integer.class, "aggregationType", false, "AGGREGATION_TYPE");
        public final static Property FinancialAccountType = new Property(3, Integer.class, "financialAccountType", false, "FINANCIAL_ACCOUNT_TYPE");
        public final static Property GroupKey = new Property(4, String.class, "groupKey", false, "GROUP_KEY");
        public final static Property BusinessObjectId = new Property(5, long.class, "businessObjectId", false, "BUSINESS_OBJECT_ID");
        public final static Property AccountTypeGroupId = new Property(6, long.class, "accountTypeGroupId", false, "ACCOUNT_TYPE_GROUP_ID");
        public final static Property ParentAccountTypeId = new Property(7, long.class, "parentAccountTypeId", false, "PARENT_ACCOUNT_TYPE_ID");
    };

    private DaoSession daoSession;

    private Query<AccountType> accountTypeGroup_AccountTypesQuery;
    private Query<AccountType> accountType_ChildrenQuery;

    public AccountTypeDao(DaoConfig config) {
        super(config);
    }
    
    public AccountTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ACCOUNT_TYPE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ACCOUNT_TYPE_NAME' TEXT," + // 1: accountTypeName
                "'AGGREGATION_TYPE' INTEGER," + // 2: aggregationType
                "'FINANCIAL_ACCOUNT_TYPE' INTEGER," + // 3: financialAccountType
                "'GROUP_KEY' TEXT," + // 4: groupKey
                "'BUSINESS_OBJECT_ID' INTEGER NOT NULL ," + // 5: businessObjectId
                "'ACCOUNT_TYPE_GROUP_ID' INTEGER NOT NULL ," + // 6: accountTypeGroupId
                "'PARENT_ACCOUNT_TYPE_ID' INTEGER NOT NULL );"); // 7: parentAccountTypeId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ACCOUNT_TYPE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AccountType entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String accountTypeName = entity.getAccountTypeName();
        if (accountTypeName != null) {
            stmt.bindString(2, accountTypeName);
        }
 
        Integer aggregationType = entity.getAggregationType();
        if (aggregationType != null) {
            stmt.bindLong(3, aggregationType);
        }
 
        Integer financialAccountType = entity.getFinancialAccountType();
        if (financialAccountType != null) {
            stmt.bindLong(4, financialAccountType);
        }
 
        String groupKey = entity.getGroupKey();
        if (groupKey != null) {
            stmt.bindString(5, groupKey);
        }
        stmt.bindLong(6, entity.getBusinessObjectId());
        stmt.bindLong(7, entity.getAccountTypeGroupId());
        stmt.bindLong(8, entity.getParentAccountTypeId());
    }

    @Override
    protected void attachEntity(AccountType entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AccountType readEntity(Cursor cursor, int offset) {
        AccountType entity = new AccountType( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // accountTypeName
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // aggregationType
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // financialAccountType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // groupKey
            cursor.getLong(offset + 5), // businessObjectId
            cursor.getLong(offset + 6), // accountTypeGroupId
            cursor.getLong(offset + 7) // parentAccountTypeId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AccountType entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccountTypeName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAggregationType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setFinancialAccountType(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setGroupKey(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBusinessObjectId(cursor.getLong(offset + 5));
        entity.setAccountTypeGroupId(cursor.getLong(offset + 6));
        entity.setParentAccountTypeId(cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AccountType entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AccountType entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "accountTypes" to-many relationship of AccountTypeGroup. */
    public synchronized List<AccountType> _queryAccountTypeGroup_AccountTypes(long accountTypeGroupId) {
        if (accountTypeGroup_AccountTypesQuery == null) {
            QueryBuilder<AccountType> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.AccountTypeGroupId.eq(accountTypeGroupId));
            accountTypeGroup_AccountTypesQuery = queryBuilder.build();
        } else {
            accountTypeGroup_AccountTypesQuery.setParameter(0, accountTypeGroupId);
        }
        return accountTypeGroup_AccountTypesQuery.list();
    }

    /** Internal query to resolve the "children" to-many relationship of AccountType. */
    public synchronized List<AccountType> _queryAccountType_Children(long parentAccountTypeId) {
        if (accountType_ChildrenQuery == null) {
            QueryBuilder<AccountType> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.ParentAccountTypeId.eq(parentAccountTypeId));
            accountType_ChildrenQuery = queryBuilder.build();
        } else {
            accountType_ChildrenQuery.setParameter(0, parentAccountTypeId);
        }
        return accountType_ChildrenQuery.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getBusinessObjectBaseDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getAccountTypeGroupDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getAccountTypeDao().getAllColumns());
            builder.append(" FROM ACCOUNT_TYPE T");
            builder.append(" LEFT JOIN BUSINESS_OBJECT_BASE T0 ON T.'BUSINESS_OBJECT_ID'=T0.'_id'");
            builder.append(" LEFT JOIN ACCOUNT_TYPE_GROUP T1 ON T.'ACCOUNT_TYPE_GROUP_ID'=T1.'_id'");
            builder.append(" LEFT JOIN ACCOUNT_TYPE T2 ON T.'PARENT_ACCOUNT_TYPE_ID'=T2.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected AccountType loadCurrentDeep(Cursor cursor, boolean lock) {
        AccountType entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        BusinessObjectBase businessObjectBase = loadCurrentOther(daoSession.getBusinessObjectBaseDao(), cursor, offset);
         if(businessObjectBase != null) {
            entity.setBusinessObjectBase(businessObjectBase);
        }
        offset += daoSession.getBusinessObjectBaseDao().getAllColumns().length;

        AccountTypeGroup accountTypeGroup = loadCurrentOther(daoSession.getAccountTypeGroupDao(), cursor, offset);
         if(accountTypeGroup != null) {
            entity.setAccountTypeGroup(accountTypeGroup);
        }
        offset += daoSession.getAccountTypeGroupDao().getAllColumns().length;

        AccountType parent = loadCurrentOther(daoSession.getAccountTypeDao(), cursor, offset);
         if(parent != null) {
            entity.setParent(parent);
        }

        return entity;    
    }

    public AccountType loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<AccountType> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<AccountType> list = new ArrayList<AccountType>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<AccountType> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<AccountType> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
