package com.moneydesktop.finance.database;

import com.moneydesktop.finance.database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table LOCATION.
 */
public class Location {

    private Long id;
    private String city;
    private Boolean isClient;
    private Double latitude;
    private String locationType;
    private Double longitude;
    private String name;
    private String postalCode;
    private String state;
    private String streetAddress;
    private long bankId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient LocationDao myDao;

    private Bank bank;
    private Long bank__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Location() {
    }

    public Location(Long id) {
        this.id = id;
    }

    public Location(Long id, String city, Boolean isClient, Double latitude, String locationType, Double longitude, String name, String postalCode, String state, String streetAddress, long bankId) {
        this.id = id;
        this.city = city;
        this.isClient = isClient;
        this.latitude = latitude;
        this.locationType = locationType;
        this.longitude = longitude;
        this.name = name;
        this.postalCode = postalCode;
        this.state = state;
        this.streetAddress = streetAddress;
        this.bankId = bankId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLocationDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public Boolean getIsClient() {
        return isClient;
    }

    public void setIsClient(Boolean isClient) {
        this.isClient = isClient;
    }

    public Double getLatitude() {
        return latitude;
    }

    public void setLatitude(Double latitude) {
        this.latitude = latitude;
    }

    public String getLocationType() {
        return locationType;
    }

    public void setLocationType(String locationType) {
        this.locationType = locationType;
    }

    public Double getLongitude() {
        return longitude;
    }

    public void setLongitude(Double longitude) {
        this.longitude = longitude;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getPostalCode() {
        return postalCode;
    }

    public void setPostalCode(String postalCode) {
        this.postalCode = postalCode;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public String getStreetAddress() {
        return streetAddress;
    }

    public void setStreetAddress(String streetAddress) {
        this.streetAddress = streetAddress;
    }

    public long getBankId() {
        return bankId;
    }

    public void setBankId(long bankId) {
        this.bankId = bankId;
    }

    /** To-one relationship, resolved on first access. */
    public Bank getBank() {
        if (bank__resolvedKey == null || !bank__resolvedKey.equals(bankId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BankDao targetDao = daoSession.getBankDao();
            bank = targetDao.load(bankId);
            bank__resolvedKey = bankId;
        }
        return bank;
    }

    public void setBank(Bank bank) {
        if (bank == null) {
            throw new DaoException("To-one property 'bankId' has not-null constraint; cannot set to-one to null");
        }
        this.bank = bank;
        bankId = bank.getId();
        bank__resolvedKey = bankId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
