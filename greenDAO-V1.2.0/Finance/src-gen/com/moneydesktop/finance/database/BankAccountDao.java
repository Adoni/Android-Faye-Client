package com.moneydesktop.finance.database;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

import com.moneydesktop.finance.database.BankAccount;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BANK_ACCOUNT.
*/
public class BankAccountDao extends AbstractDao<BankAccount, Long> {

    public static final String TABLENAME = "BANK_ACCOUNT";

    /**
     * Properties of entity BankAccount.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AccountId = new Property(1, String.class, "accountId", false, "ACCOUNT_ID");
        public final static Property AccountName = new Property(2, String.class, "accountName", false, "ACCOUNT_NAME");
        public final static Property AccountNumber = new Property(3, String.class, "accountNumber", false, "ACCOUNT_NUMBER");
        public final static Property Balance = new Property(4, Double.class, "balance", false, "BALANCE");
        public final static Property BankName = new Property(5, String.class, "bankName", false, "BANK_NAME");
        public final static Property BeginningBalance = new Property(6, Double.class, "beginningBalance", false, "BEGINNING_BALANCE");
        public final static Property CreditLimit = new Property(7, Float.class, "creditLimit", false, "CREDIT_LIMIT");
        public final static Property DefaultClassId = new Property(8, String.class, "defaultClassId", false, "DEFAULT_CLASS_ID");
        public final static Property DueDay = new Property(9, Integer.class, "dueDay", false, "DUE_DAY");
        public final static Property ExclusionFlags = new Property(10, Integer.class, "exclusionFlags", false, "EXCLUSION_FLAGS");
        public final static Property InstitutionId = new Property(11, String.class, "institutionId", false, "INSTITUTION_ID");
        public final static Property InterestRate = new Property(12, Float.class, "interestRate", false, "INTEREST_RATE");
        public final static Property IsExcluded = new Property(13, Boolean.class, "isExcluded", false, "IS_EXCLUDED");
        public final static Property IsHolding = new Property(14, Boolean.class, "isHolding", false, "IS_HOLDING");
        public final static Property IsLinked = new Property(15, Boolean.class, "isLinked", false, "IS_LINKED");
        public final static Property LocalBalance = new Property(16, Double.class, "localBalance", false, "LOCAL_BALANCE");
        public final static Property MinimumPayment = new Property(17, Double.class, "minimumPayment", false, "MINIMUM_PAYMENT");
        public final static Property MortgageTotal = new Property(18, Integer.class, "mortgageTotal", false, "MORTGAGE_TOTAL");
        public final static Property Notes = new Property(19, String.class, "notes", false, "NOTES");
        public final static Property OriginalName = new Property(20, String.class, "originalName", false, "ORIGINAL_NAME");
        public final static Property PropertyType = new Property(21, Integer.class, "propertyType", false, "PROPERTY_TYPE");
        public final static Property TransactionCount = new Property(22, Integer.class, "transactionCount", false, "TRANSACTION_COUNT");
        public final static Property BankAccountId = new Property(23, long.class, "bankAccountId", false, "BANK_ACCOUNT_ID");
        public final static Property BusinessObjectId = new Property(24, long.class, "businessObjectId", false, "BUSINESS_OBJECT_ID");
        public final static Property AccountTypeId = new Property(25, long.class, "accountTypeId", false, "ACCOUNT_TYPE_ID");
        public final static Property SubAccountTypeId = new Property(26, long.class, "subAccountTypeId", false, "SUB_ACCOUNT_TYPE_ID");
    };

    private DaoSession daoSession;

    private Query<BankAccount> bank_BankAccountsQuery;
    private Query<BankAccount> accountType_BankAccountsQuery;

    public BankAccountDao(DaoConfig config) {
        super(config);
    }
    
    public BankAccountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BANK_ACCOUNT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ACCOUNT_ID' TEXT," + // 1: accountId
                "'ACCOUNT_NAME' TEXT," + // 2: accountName
                "'ACCOUNT_NUMBER' TEXT," + // 3: accountNumber
                "'BALANCE' REAL," + // 4: balance
                "'BANK_NAME' TEXT," + // 5: bankName
                "'BEGINNING_BALANCE' REAL," + // 6: beginningBalance
                "'CREDIT_LIMIT' REAL," + // 7: creditLimit
                "'DEFAULT_CLASS_ID' TEXT," + // 8: defaultClassId
                "'DUE_DAY' INTEGER," + // 9: dueDay
                "'EXCLUSION_FLAGS' INTEGER," + // 10: exclusionFlags
                "'INSTITUTION_ID' TEXT," + // 11: institutionId
                "'INTEREST_RATE' REAL," + // 12: interestRate
                "'IS_EXCLUDED' INTEGER," + // 13: isExcluded
                "'IS_HOLDING' INTEGER," + // 14: isHolding
                "'IS_LINKED' INTEGER," + // 15: isLinked
                "'LOCAL_BALANCE' REAL," + // 16: localBalance
                "'MINIMUM_PAYMENT' REAL," + // 17: minimumPayment
                "'MORTGAGE_TOTAL' INTEGER," + // 18: mortgageTotal
                "'NOTES' TEXT," + // 19: notes
                "'ORIGINAL_NAME' TEXT," + // 20: originalName
                "'PROPERTY_TYPE' INTEGER," + // 21: propertyType
                "'TRANSACTION_COUNT' INTEGER," + // 22: transactionCount
                "'BANK_ACCOUNT_ID' INTEGER NOT NULL ," + // 23: bankAccountId
                "'BUSINESS_OBJECT_ID' INTEGER NOT NULL ," + // 24: businessObjectId
                "'ACCOUNT_TYPE_ID' INTEGER NOT NULL ," + // 25: accountTypeId
                "'SUB_ACCOUNT_TYPE_ID' INTEGER NOT NULL );"); // 26: subAccountTypeId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BANK_ACCOUNT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BankAccount entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String accountId = entity.getAccountId();
        if (accountId != null) {
            stmt.bindString(2, accountId);
        }
 
        String accountName = entity.getAccountName();
        if (accountName != null) {
            stmt.bindString(3, accountName);
        }
 
        String accountNumber = entity.getAccountNumber();
        if (accountNumber != null) {
            stmt.bindString(4, accountNumber);
        }
 
        Double balance = entity.getBalance();
        if (balance != null) {
            stmt.bindDouble(5, balance);
        }
 
        String bankName = entity.getBankName();
        if (bankName != null) {
            stmt.bindString(6, bankName);
        }
 
        Double beginningBalance = entity.getBeginningBalance();
        if (beginningBalance != null) {
            stmt.bindDouble(7, beginningBalance);
        }
 
        Float creditLimit = entity.getCreditLimit();
        if (creditLimit != null) {
            stmt.bindDouble(8, creditLimit);
        }
 
        String defaultClassId = entity.getDefaultClassId();
        if (defaultClassId != null) {
            stmt.bindString(9, defaultClassId);
        }
 
        Integer dueDay = entity.getDueDay();
        if (dueDay != null) {
            stmt.bindLong(10, dueDay);
        }
 
        Integer exclusionFlags = entity.getExclusionFlags();
        if (exclusionFlags != null) {
            stmt.bindLong(11, exclusionFlags);
        }
 
        String institutionId = entity.getInstitutionId();
        if (institutionId != null) {
            stmt.bindString(12, institutionId);
        }
 
        Float interestRate = entity.getInterestRate();
        if (interestRate != null) {
            stmt.bindDouble(13, interestRate);
        }
 
        Boolean isExcluded = entity.getIsExcluded();
        if (isExcluded != null) {
            stmt.bindLong(14, isExcluded ? 1l: 0l);
        }
 
        Boolean isHolding = entity.getIsHolding();
        if (isHolding != null) {
            stmt.bindLong(15, isHolding ? 1l: 0l);
        }
 
        Boolean isLinked = entity.getIsLinked();
        if (isLinked != null) {
            stmt.bindLong(16, isLinked ? 1l: 0l);
        }
 
        Double localBalance = entity.getLocalBalance();
        if (localBalance != null) {
            stmt.bindDouble(17, localBalance);
        }
 
        Double minimumPayment = entity.getMinimumPayment();
        if (minimumPayment != null) {
            stmt.bindDouble(18, minimumPayment);
        }
 
        Integer mortgageTotal = entity.getMortgageTotal();
        if (mortgageTotal != null) {
            stmt.bindLong(19, mortgageTotal);
        }
 
        String notes = entity.getNotes();
        if (notes != null) {
            stmt.bindString(20, notes);
        }
 
        String originalName = entity.getOriginalName();
        if (originalName != null) {
            stmt.bindString(21, originalName);
        }
 
        Integer propertyType = entity.getPropertyType();
        if (propertyType != null) {
            stmt.bindLong(22, propertyType);
        }
 
        Integer transactionCount = entity.getTransactionCount();
        if (transactionCount != null) {
            stmt.bindLong(23, transactionCount);
        }
        stmt.bindLong(24, entity.getBankAccountId());
        stmt.bindLong(25, entity.getBusinessObjectId());
        stmt.bindLong(26, entity.getAccountTypeId());
        stmt.bindLong(27, entity.getSubAccountTypeId());
    }

    @Override
    protected void attachEntity(BankAccount entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BankAccount readEntity(Cursor cursor, int offset) {
        BankAccount entity = new BankAccount( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // accountId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // accountName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // accountNumber
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // balance
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bankName
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // beginningBalance
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // creditLimit
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // defaultClassId
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // dueDay
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // exclusionFlags
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // institutionId
            cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12), // interestRate
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // isExcluded
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // isHolding
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0, // isLinked
            cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16), // localBalance
            cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17), // minimumPayment
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // mortgageTotal
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // notes
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // originalName
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // propertyType
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // transactionCount
            cursor.getLong(offset + 23), // bankAccountId
            cursor.getLong(offset + 24), // businessObjectId
            cursor.getLong(offset + 25), // accountTypeId
            cursor.getLong(offset + 26) // subAccountTypeId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BankAccount entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccountId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAccountName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAccountNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBalance(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setBankName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBeginningBalance(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setCreditLimit(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
        entity.setDefaultClassId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDueDay(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setExclusionFlags(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setInstitutionId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setInterestRate(cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12));
        entity.setIsExcluded(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.setIsHolding(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setIsLinked(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
        entity.setLocalBalance(cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16));
        entity.setMinimumPayment(cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17));
        entity.setMortgageTotal(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setNotes(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setOriginalName(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setPropertyType(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setTransactionCount(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setBankAccountId(cursor.getLong(offset + 23));
        entity.setBusinessObjectId(cursor.getLong(offset + 24));
        entity.setAccountTypeId(cursor.getLong(offset + 25));
        entity.setSubAccountTypeId(cursor.getLong(offset + 26));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BankAccount entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BankAccount entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "bankAccounts" to-many relationship of Bank. */
    public synchronized List<BankAccount> _queryBank_BankAccounts(long bankAccountId) {
        if (bank_BankAccountsQuery == null) {
            QueryBuilder<BankAccount> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.BankAccountId.eq(bankAccountId));
            bank_BankAccountsQuery = queryBuilder.build();
        } else {
            bank_BankAccountsQuery.setParameter(0, bankAccountId);
        }
        return bank_BankAccountsQuery.list();
    }

    /** Internal query to resolve the "bankAccounts" to-many relationship of AccountType. */
    public synchronized List<BankAccount> _queryAccountType_BankAccounts(long accountTypeId) {
        if (accountType_BankAccountsQuery == null) {
            QueryBuilder<BankAccount> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.AccountTypeId.eq(accountTypeId));
            accountType_BankAccountsQuery = queryBuilder.build();
        } else {
            accountType_BankAccountsQuery.setParameter(0, accountTypeId);
        }
        return accountType_BankAccountsQuery.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getBankDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getBusinessObjectBaseDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getAccountTypeDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getAccountTypeDao().getAllColumns());
            builder.append(" FROM BANK_ACCOUNT T");
            builder.append(" LEFT JOIN BANK T0 ON T.'BANK_ACCOUNT_ID'=T0.'_id'");
            builder.append(" LEFT JOIN BUSINESS_OBJECT_BASE T1 ON T.'BUSINESS_OBJECT_ID'=T1.'_id'");
            builder.append(" LEFT JOIN ACCOUNT_TYPE T2 ON T.'ACCOUNT_TYPE_ID'=T2.'_id'");
            builder.append(" LEFT JOIN ACCOUNT_TYPE T3 ON T.'SUB_ACCOUNT_TYPE_ID'=T3.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected BankAccount loadCurrentDeep(Cursor cursor, boolean lock) {
        BankAccount entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Bank bank = loadCurrentOther(daoSession.getBankDao(), cursor, offset);
         if(bank != null) {
            entity.setBank(bank);
        }
        offset += daoSession.getBankDao().getAllColumns().length;

        BusinessObjectBase businessObjectBase = loadCurrentOther(daoSession.getBusinessObjectBaseDao(), cursor, offset);
         if(businessObjectBase != null) {
            entity.setBusinessObjectBase(businessObjectBase);
        }
        offset += daoSession.getBusinessObjectBaseDao().getAllColumns().length;

        AccountType accountType = loadCurrentOther(daoSession.getAccountTypeDao(), cursor, offset);
         if(accountType != null) {
            entity.setAccountType(accountType);
        }
        offset += daoSession.getAccountTypeDao().getAllColumns().length;

        AccountType subAccountType = loadCurrentOther(daoSession.getAccountTypeDao(), cursor, offset);
         if(subAccountType != null) {
            entity.setSubAccountType(subAccountType);
        }

        return entity;    
    }

    public BankAccount loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<BankAccount> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<BankAccount> list = new ArrayList<BankAccount>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<BankAccount> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<BankAccount> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
