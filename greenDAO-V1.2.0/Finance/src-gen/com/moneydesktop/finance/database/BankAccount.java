package com.moneydesktop.finance.database;

import java.util.List;
import com.moneydesktop.finance.database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table BANK_ACCOUNT.
 */
public class BankAccount {

    private Long id;
    private String accountId;
    private String accountName;
    private String accountNumber;
    private Double balance;
    private String bankName;
    private Double beginningBalance;
    private Float creditLimit;
    private String defaultClassId;
    private Integer dueDay;
    private Integer exclusionFlags;
    private String institutionId;
    private Float interestRate;
    private Boolean isExcluded;
    private Boolean isHolding;
    private Boolean isLinked;
    private Double localBalance;
    private Double minimumPayment;
    private Integer mortgageTotal;
    private String notes;
    private String originalName;
    private Integer propertyType;
    private Integer transactionCount;
    private long bankAccountId;
    private long businessObjectId;
    private long accountTypeId;
    private long subAccountTypeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient BankAccountDao myDao;

    private Bank bank;
    private Long bank__resolvedKey;

    private BusinessObjectBase businessObjectBase;
    private Long businessObjectBase__resolvedKey;

    private AccountType accountType;
    private Long accountType__resolvedKey;

    private AccountType subAccountType;
    private Long subAccountType__resolvedKey;

    private List<BankAccountBalance> bankAccountBalances;
    private List<Transaction> transactions;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public BankAccount() {
    }

    public BankAccount(Long id) {
        this.id = id;
    }

    public BankAccount(Long id, String accountId, String accountName, String accountNumber, Double balance, String bankName, Double beginningBalance, Float creditLimit, String defaultClassId, Integer dueDay, Integer exclusionFlags, String institutionId, Float interestRate, Boolean isExcluded, Boolean isHolding, Boolean isLinked, Double localBalance, Double minimumPayment, Integer mortgageTotal, String notes, String originalName, Integer propertyType, Integer transactionCount, long bankAccountId, long businessObjectId, long accountTypeId, long subAccountTypeId) {
        this.id = id;
        this.accountId = accountId;
        this.accountName = accountName;
        this.accountNumber = accountNumber;
        this.balance = balance;
        this.bankName = bankName;
        this.beginningBalance = beginningBalance;
        this.creditLimit = creditLimit;
        this.defaultClassId = defaultClassId;
        this.dueDay = dueDay;
        this.exclusionFlags = exclusionFlags;
        this.institutionId = institutionId;
        this.interestRate = interestRate;
        this.isExcluded = isExcluded;
        this.isHolding = isHolding;
        this.isLinked = isLinked;
        this.localBalance = localBalance;
        this.minimumPayment = minimumPayment;
        this.mortgageTotal = mortgageTotal;
        this.notes = notes;
        this.originalName = originalName;
        this.propertyType = propertyType;
        this.transactionCount = transactionCount;
        this.bankAccountId = bankAccountId;
        this.businessObjectId = businessObjectId;
        this.accountTypeId = accountTypeId;
        this.subAccountTypeId = subAccountTypeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBankAccountDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getAccountId() {
        return accountId;
    }

    public void setAccountId(String accountId) {
        this.accountId = accountId;
    }

    public String getAccountName() {
        return accountName;
    }

    public void setAccountName(String accountName) {
        this.accountName = accountName;
    }

    public String getAccountNumber() {
        return accountNumber;
    }

    public void setAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
    }

    public Double getBalance() {
        return balance;
    }

    public void setBalance(Double balance) {
        this.balance = balance;
    }

    public String getBankName() {
        return bankName;
    }

    public void setBankName(String bankName) {
        this.bankName = bankName;
    }

    public Double getBeginningBalance() {
        return beginningBalance;
    }

    public void setBeginningBalance(Double beginningBalance) {
        this.beginningBalance = beginningBalance;
    }

    public Float getCreditLimit() {
        return creditLimit;
    }

    public void setCreditLimit(Float creditLimit) {
        this.creditLimit = creditLimit;
    }

    public String getDefaultClassId() {
        return defaultClassId;
    }

    public void setDefaultClassId(String defaultClassId) {
        this.defaultClassId = defaultClassId;
    }

    public Integer getDueDay() {
        return dueDay;
    }

    public void setDueDay(Integer dueDay) {
        this.dueDay = dueDay;
    }

    public Integer getExclusionFlags() {
        return exclusionFlags;
    }

    public void setExclusionFlags(Integer exclusionFlags) {
        this.exclusionFlags = exclusionFlags;
    }

    public String getInstitutionId() {
        return institutionId;
    }

    public void setInstitutionId(String institutionId) {
        this.institutionId = institutionId;
    }

    public Float getInterestRate() {
        return interestRate;
    }

    public void setInterestRate(Float interestRate) {
        this.interestRate = interestRate;
    }

    public Boolean getIsExcluded() {
        return isExcluded;
    }

    public void setIsExcluded(Boolean isExcluded) {
        this.isExcluded = isExcluded;
    }

    public Boolean getIsHolding() {
        return isHolding;
    }

    public void setIsHolding(Boolean isHolding) {
        this.isHolding = isHolding;
    }

    public Boolean getIsLinked() {
        return isLinked;
    }

    public void setIsLinked(Boolean isLinked) {
        this.isLinked = isLinked;
    }

    public Double getLocalBalance() {
        return localBalance;
    }

    public void setLocalBalance(Double localBalance) {
        this.localBalance = localBalance;
    }

    public Double getMinimumPayment() {
        return minimumPayment;
    }

    public void setMinimumPayment(Double minimumPayment) {
        this.minimumPayment = minimumPayment;
    }

    public Integer getMortgageTotal() {
        return mortgageTotal;
    }

    public void setMortgageTotal(Integer mortgageTotal) {
        this.mortgageTotal = mortgageTotal;
    }

    public String getNotes() {
        return notes;
    }

    public void setNotes(String notes) {
        this.notes = notes;
    }

    public String getOriginalName() {
        return originalName;
    }

    public void setOriginalName(String originalName) {
        this.originalName = originalName;
    }

    public Integer getPropertyType() {
        return propertyType;
    }

    public void setPropertyType(Integer propertyType) {
        this.propertyType = propertyType;
    }

    public Integer getTransactionCount() {
        return transactionCount;
    }

    public void setTransactionCount(Integer transactionCount) {
        this.transactionCount = transactionCount;
    }

    public long getBankAccountId() {
        return bankAccountId;
    }

    public void setBankAccountId(long bankAccountId) {
        this.bankAccountId = bankAccountId;
    }

    public long getBusinessObjectId() {
        return businessObjectId;
    }

    public void setBusinessObjectId(long businessObjectId) {
        this.businessObjectId = businessObjectId;
    }

    public long getAccountTypeId() {
        return accountTypeId;
    }

    public void setAccountTypeId(long accountTypeId) {
        this.accountTypeId = accountTypeId;
    }

    public long getSubAccountTypeId() {
        return subAccountTypeId;
    }

    public void setSubAccountTypeId(long subAccountTypeId) {
        this.subAccountTypeId = subAccountTypeId;
    }

    /** To-one relationship, resolved on first access. */
    public Bank getBank() {
        if (bank__resolvedKey == null || !bank__resolvedKey.equals(bankAccountId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BankDao targetDao = daoSession.getBankDao();
            bank = targetDao.load(bankAccountId);
            bank__resolvedKey = bankAccountId;
        }
        return bank;
    }

    public void setBank(Bank bank) {
        if (bank == null) {
            throw new DaoException("To-one property 'bankAccountId' has not-null constraint; cannot set to-one to null");
        }
        this.bank = bank;
        bankAccountId = bank.getId();
        bank__resolvedKey = bankAccountId;
    }

    /** To-one relationship, resolved on first access. */
    public BusinessObjectBase getBusinessObjectBase() {
        if (businessObjectBase__resolvedKey == null || !businessObjectBase__resolvedKey.equals(businessObjectId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BusinessObjectBaseDao targetDao = daoSession.getBusinessObjectBaseDao();
            businessObjectBase = targetDao.load(businessObjectId);
            businessObjectBase__resolvedKey = businessObjectId;
        }
        return businessObjectBase;
    }

    public void setBusinessObjectBase(BusinessObjectBase businessObjectBase) {
        if (businessObjectBase == null) {
            throw new DaoException("To-one property 'businessObjectId' has not-null constraint; cannot set to-one to null");
        }
        this.businessObjectBase = businessObjectBase;
        businessObjectId = businessObjectBase.getId();
        businessObjectBase__resolvedKey = businessObjectId;
    }

    /** To-one relationship, resolved on first access. */
    public AccountType getAccountType() {
        if (accountType__resolvedKey == null || !accountType__resolvedKey.equals(accountTypeId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AccountTypeDao targetDao = daoSession.getAccountTypeDao();
            accountType = targetDao.load(accountTypeId);
            accountType__resolvedKey = accountTypeId;
        }
        return accountType;
    }

    public void setAccountType(AccountType accountType) {
        if (accountType == null) {
            throw new DaoException("To-one property 'accountTypeId' has not-null constraint; cannot set to-one to null");
        }
        this.accountType = accountType;
        accountTypeId = accountType.getId();
        accountType__resolvedKey = accountTypeId;
    }

    /** To-one relationship, resolved on first access. */
    public AccountType getSubAccountType() {
        if (subAccountType__resolvedKey == null || !subAccountType__resolvedKey.equals(subAccountTypeId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AccountTypeDao targetDao = daoSession.getAccountTypeDao();
            subAccountType = targetDao.load(subAccountTypeId);
            subAccountType__resolvedKey = subAccountTypeId;
        }
        return subAccountType;
    }

    public void setSubAccountType(AccountType subAccountType) {
        if (subAccountType == null) {
            throw new DaoException("To-one property 'subAccountTypeId' has not-null constraint; cannot set to-one to null");
        }
        this.subAccountType = subAccountType;
        subAccountTypeId = subAccountType.getId();
        subAccountType__resolvedKey = subAccountTypeId;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<BankAccountBalance> getBankAccountBalances() {
        if (bankAccountBalances == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BankAccountBalanceDao targetDao = daoSession.getBankAccountBalanceDao();
            bankAccountBalances = targetDao._queryBankAccount_BankAccountBalances(id);
        }
        return bankAccountBalances;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetBankAccountBalances() {
        bankAccountBalances = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<Transaction> getTransactions() {
        if (transactions == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TransactionDao targetDao = daoSession.getTransactionDao();
            transactions = targetDao._queryBankAccount_Transactions(id);
        }
        return transactions;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTransactions() {
        transactions = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
