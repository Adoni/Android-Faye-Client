package com.moneydesktop.finance.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.moneydesktop.finance.database.Institution;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table INSTITUTION.
*/
public class InstitutionDao extends AbstractDao<Institution, Long> {

    public static final String TABLENAME = "INSTITUTION";

    /**
     * Properties of entity Institution.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CreatedOn = new Property(1, java.util.Date.class, "createdOn", false, "CREATED_ON");
        public final static Property Instructions = new Property(2, String.class, "instructions", false, "INSTRUCTIONS");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Phone = new Property(4, String.class, "phone", false, "PHONE");
        public final static Property Popularity = new Property(5, Integer.class, "popularity", false, "POPULARITY");
        public final static Property Status = new Property(6, Integer.class, "status", false, "STATUS");
        public final static Property UpdatedOn = new Property(7, java.util.Date.class, "updatedOn", false, "UPDATED_ON");
        public final static Property Url = new Property(8, String.class, "url", false, "URL");
    };

    private DaoSession daoSession;


    public InstitutionDao(DaoConfig config) {
        super(config);
    }
    
    public InstitutionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'INSTITUTION' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CREATED_ON' INTEGER," + // 1: createdOn
                "'INSTRUCTIONS' TEXT," + // 2: instructions
                "'NAME' TEXT," + // 3: name
                "'PHONE' TEXT," + // 4: phone
                "'POPULARITY' INTEGER," + // 5: popularity
                "'STATUS' INTEGER," + // 6: status
                "'UPDATED_ON' INTEGER," + // 7: updatedOn
                "'URL' TEXT);"); // 8: url
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'INSTITUTION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Institution entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date createdOn = entity.getCreatedOn();
        if (createdOn != null) {
            stmt.bindLong(2, createdOn.getTime());
        }
 
        String instructions = entity.getInstructions();
        if (instructions != null) {
            stmt.bindString(3, instructions);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(5, phone);
        }
 
        Integer popularity = entity.getPopularity();
        if (popularity != null) {
            stmt.bindLong(6, popularity);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(7, status);
        }
 
        java.util.Date updatedOn = entity.getUpdatedOn();
        if (updatedOn != null) {
            stmt.bindLong(8, updatedOn.getTime());
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(9, url);
        }
    }

    @Override
    protected void attachEntity(Institution entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Institution readEntity(Cursor cursor, int offset) {
        Institution entity = new Institution( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // createdOn
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // instructions
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // phone
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // popularity
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // status
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // updatedOn
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // url
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Institution entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreatedOn(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setInstructions(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPopularity(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setStatus(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setUpdatedOn(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Institution entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Institution entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
