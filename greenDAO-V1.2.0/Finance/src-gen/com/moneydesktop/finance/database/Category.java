package com.moneydesktop.finance.database;

import java.util.List;
import com.moneydesktop.finance.database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table CATEGORY.
 */
public class Category {

    private Long id;
    private String categoryName;
    private String categoryNumber;
    private String imageName;
    private Boolean isSystem;
    private Boolean isTaxRelated;
    private String notes;
    private Integer sortOrder;
    private String taxReference;
    private long categoryTypeId;
    private long parentCategoryId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CategoryDao myDao;

    private CategoryType categoryType;
    private Long categoryType__resolvedKey;

    private Category parent;
    private Long parent__resolvedKey;

    private List<Category> children;
    private List<Transaction> transactions;
    private List<BudgetItem> budgetItems;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Category() {
    }

    public Category(Long id) {
        this.id = id;
    }

    public Category(Long id, String categoryName, String categoryNumber, String imageName, Boolean isSystem, Boolean isTaxRelated, String notes, Integer sortOrder, String taxReference, long categoryTypeId, long parentCategoryId) {
        this.id = id;
        this.categoryName = categoryName;
        this.categoryNumber = categoryNumber;
        this.imageName = imageName;
        this.isSystem = isSystem;
        this.isTaxRelated = isTaxRelated;
        this.notes = notes;
        this.sortOrder = sortOrder;
        this.taxReference = taxReference;
        this.categoryTypeId = categoryTypeId;
        this.parentCategoryId = parentCategoryId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCategoryDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getCategoryName() {
        return categoryName;
    }

    public void setCategoryName(String categoryName) {
        this.categoryName = categoryName;
    }

    public String getCategoryNumber() {
        return categoryNumber;
    }

    public void setCategoryNumber(String categoryNumber) {
        this.categoryNumber = categoryNumber;
    }

    public String getImageName() {
        return imageName;
    }

    public void setImageName(String imageName) {
        this.imageName = imageName;
    }

    public Boolean getIsSystem() {
        return isSystem;
    }

    public void setIsSystem(Boolean isSystem) {
        this.isSystem = isSystem;
    }

    public Boolean getIsTaxRelated() {
        return isTaxRelated;
    }

    public void setIsTaxRelated(Boolean isTaxRelated) {
        this.isTaxRelated = isTaxRelated;
    }

    public String getNotes() {
        return notes;
    }

    public void setNotes(String notes) {
        this.notes = notes;
    }

    public Integer getSortOrder() {
        return sortOrder;
    }

    public void setSortOrder(Integer sortOrder) {
        this.sortOrder = sortOrder;
    }

    public String getTaxReference() {
        return taxReference;
    }

    public void setTaxReference(String taxReference) {
        this.taxReference = taxReference;
    }

    public long getCategoryTypeId() {
        return categoryTypeId;
    }

    public void setCategoryTypeId(long categoryTypeId) {
        this.categoryTypeId = categoryTypeId;
    }

    public long getParentCategoryId() {
        return parentCategoryId;
    }

    public void setParentCategoryId(long parentCategoryId) {
        this.parentCategoryId = parentCategoryId;
    }

    /** To-one relationship, resolved on first access. */
    public CategoryType getCategoryType() {
        if (categoryType__resolvedKey == null || !categoryType__resolvedKey.equals(categoryTypeId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoryTypeDao targetDao = daoSession.getCategoryTypeDao();
            categoryType = targetDao.load(categoryTypeId);
            categoryType__resolvedKey = categoryTypeId;
        }
        return categoryType;
    }

    public void setCategoryType(CategoryType categoryType) {
        if (categoryType == null) {
            throw new DaoException("To-one property 'categoryTypeId' has not-null constraint; cannot set to-one to null");
        }
        this.categoryType = categoryType;
        categoryTypeId = categoryType.getId();
        categoryType__resolvedKey = categoryTypeId;
    }

    /** To-one relationship, resolved on first access. */
    public Category getParent() {
        if (parent__resolvedKey == null || !parent__resolvedKey.equals(parentCategoryId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoryDao targetDao = daoSession.getCategoryDao();
            parent = targetDao.load(parentCategoryId);
            parent__resolvedKey = parentCategoryId;
        }
        return parent;
    }

    public void setParent(Category parent) {
        if (parent == null) {
            throw new DaoException("To-one property 'parentCategoryId' has not-null constraint; cannot set to-one to null");
        }
        this.parent = parent;
        parentCategoryId = parent.getId();
        parent__resolvedKey = parentCategoryId;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<Category> getChildren() {
        if (children == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoryDao targetDao = daoSession.getCategoryDao();
            children = targetDao._queryCategory_Children(id);
        }
        return children;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetChildren() {
        children = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<Transaction> getTransactions() {
        if (transactions == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TransactionDao targetDao = daoSession.getTransactionDao();
            transactions = targetDao._queryCategory_Transactions(id);
        }
        return transactions;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTransactions() {
        transactions = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<BudgetItem> getBudgetItems() {
        if (budgetItems == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BudgetItemDao targetDao = daoSession.getBudgetItemDao();
            budgetItems = targetDao._queryCategory_BudgetItems(id);
        }
        return budgetItems;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetBudgetItems() {
        budgetItems = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
