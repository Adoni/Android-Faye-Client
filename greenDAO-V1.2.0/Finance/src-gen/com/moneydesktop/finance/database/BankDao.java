package com.moneydesktop.finance.database;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

import com.moneydesktop.finance.database.Bank;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BANK.
*/
public class BankDao extends AbstractDao<Bank, Long> {

    public static final String TABLENAME = "BANK";

    /**
     * Properties of entity Bank.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BankName = new Property(1, String.class, "bankName", false, "BANK_NAME");
        public final static Property DateCreated = new Property(2, java.util.Date.class, "dateCreated", false, "DATE_CREATED");
        public final static Property DefaultClassId = new Property(3, String.class, "defaultClassId", false, "DEFAULT_CLASS_ID");
        public final static Property DeleteAction = new Property(4, String.class, "deleteAction", false, "DELETE_ACTION");
        public final static Property IsLinked = new Property(5, Boolean.class, "isLinked", false, "IS_LINKED");
        public final static Property LastRefreshDate = new Property(6, java.util.Date.class, "lastRefreshDate", false, "LAST_REFRESH_DATE");
        public final static Property LogoId = new Property(7, String.class, "logoId", false, "LOGO_ID");
        public final static Property ProcessStatus = new Property(8, Integer.class, "processStatus", false, "PROCESS_STATUS");
        public final static Property Status = new Property(9, Integer.class, "status", false, "STATUS");
        public final static Property StatusDescription = new Property(10, String.class, "statusDescription", false, "STATUS_DESCRIPTION");
        public final static Property StatusFlags = new Property(11, Integer.class, "statusFlags", false, "STATUS_FLAGS");
        public final static Property StatusInstructions = new Property(12, String.class, "statusInstructions", false, "STATUS_INSTRUCTIONS");
        public final static Property InstitutionId = new Property(13, long.class, "institutionId", false, "INSTITUTION_ID");
    };

    private DaoSession daoSession;

    private Query<Bank> institution_BanksQuery;

    public BankDao(DaoConfig config) {
        super(config);
    }
    
    public BankDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BANK' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'BANK_NAME' TEXT," + // 1: bankName
                "'DATE_CREATED' INTEGER," + // 2: dateCreated
                "'DEFAULT_CLASS_ID' TEXT," + // 3: defaultClassId
                "'DELETE_ACTION' TEXT," + // 4: deleteAction
                "'IS_LINKED' INTEGER," + // 5: isLinked
                "'LAST_REFRESH_DATE' INTEGER," + // 6: lastRefreshDate
                "'LOGO_ID' TEXT," + // 7: logoId
                "'PROCESS_STATUS' INTEGER," + // 8: processStatus
                "'STATUS' INTEGER," + // 9: status
                "'STATUS_DESCRIPTION' TEXT," + // 10: statusDescription
                "'STATUS_FLAGS' INTEGER," + // 11: statusFlags
                "'STATUS_INSTRUCTIONS' TEXT," + // 12: statusInstructions
                "'INSTITUTION_ID' INTEGER NOT NULL );"); // 13: institutionId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BANK'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Bank entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bankName = entity.getBankName();
        if (bankName != null) {
            stmt.bindString(2, bankName);
        }
 
        java.util.Date dateCreated = entity.getDateCreated();
        if (dateCreated != null) {
            stmt.bindLong(3, dateCreated.getTime());
        }
 
        String defaultClassId = entity.getDefaultClassId();
        if (defaultClassId != null) {
            stmt.bindString(4, defaultClassId);
        }
 
        String deleteAction = entity.getDeleteAction();
        if (deleteAction != null) {
            stmt.bindString(5, deleteAction);
        }
 
        Boolean isLinked = entity.getIsLinked();
        if (isLinked != null) {
            stmt.bindLong(6, isLinked ? 1l: 0l);
        }
 
        java.util.Date lastRefreshDate = entity.getLastRefreshDate();
        if (lastRefreshDate != null) {
            stmt.bindLong(7, lastRefreshDate.getTime());
        }
 
        String logoId = entity.getLogoId();
        if (logoId != null) {
            stmt.bindString(8, logoId);
        }
 
        Integer processStatus = entity.getProcessStatus();
        if (processStatus != null) {
            stmt.bindLong(9, processStatus);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(10, status);
        }
 
        String statusDescription = entity.getStatusDescription();
        if (statusDescription != null) {
            stmt.bindString(11, statusDescription);
        }
 
        Integer statusFlags = entity.getStatusFlags();
        if (statusFlags != null) {
            stmt.bindLong(12, statusFlags);
        }
 
        String statusInstructions = entity.getStatusInstructions();
        if (statusInstructions != null) {
            stmt.bindString(13, statusInstructions);
        }
        stmt.bindLong(14, entity.getInstitutionId());
    }

    @Override
    protected void attachEntity(Bank entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Bank readEntity(Cursor cursor, int offset) {
        Bank entity = new Bank( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bankName
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // dateCreated
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // defaultClassId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // deleteAction
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // isLinked
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // lastRefreshDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // logoId
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // processStatus
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // status
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // statusDescription
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // statusFlags
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // statusInstructions
            cursor.getLong(offset + 13) // institutionId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Bank entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBankName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDateCreated(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setDefaultClassId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDeleteAction(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsLinked(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setLastRefreshDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setLogoId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setProcessStatus(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setStatus(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setStatusDescription(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStatusFlags(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setStatusInstructions(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setInstitutionId(cursor.getLong(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Bank entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Bank entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "banks" to-many relationship of Institution. */
    public synchronized List<Bank> _queryInstitution_Banks(long institutionId) {
        if (institution_BanksQuery == null) {
            QueryBuilder<Bank> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.InstitutionId.eq(institutionId));
            institution_BanksQuery = queryBuilder.build();
        } else {
            institution_BanksQuery.setParameter(0, institutionId);
        }
        return institution_BanksQuery.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getInstitutionDao().getAllColumns());
            builder.append(" FROM BANK T");
            builder.append(" LEFT JOIN INSTITUTION T0 ON T.'INSTITUTION_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Bank loadCurrentDeep(Cursor cursor, boolean lock) {
        Bank entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Institution institution = loadCurrentOther(daoSession.getInstitutionDao(), cursor, offset);
         if(institution != null) {
            entity.setInstitution(institution);
        }

        return entity;    
    }

    public Bank loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Bank> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Bank> list = new ArrayList<Bank>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Bank> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Bank> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
